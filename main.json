{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.36.177.2456",
      "templateHash": "10759504200006217991"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "eastus2",
      "allowedValues": [
        "westus",
        "eastus",
        "eastus2",
        "japaneast",
        "francecentral",
        "spaincentral",
        "uaenorth",
        "southcentralus",
        "italynorth",
        "germanywestcentral",
        "brazilsouth",
        "southafricanorth",
        "australiaeast",
        "swedencentral",
        "westus3",
        "centralus",
        "uksouth",
        "southindia",
        "koreacentral",
        "polandcentral",
        "switzerlandnorth",
        "norwayeast"
      ],
      "metadata": {
        "description": "Location for all resources."
      }
    },
    "environmentName": {
      "type": "string",
      "metadata": {
        "description": "Name of the environment which is used to generate a short unique hash used in all resources."
      }
    },
    "tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags to apply to all resources"
      }
    },
    "modelName": {
      "type": "string",
      "defaultValue": "gpt-4o",
      "metadata": {
        "description": "The name of the model you want to deploy"
      }
    },
    "modelFormat": {
      "type": "string",
      "defaultValue": "OpenAI",
      "metadata": {
        "description": "The provider of your model"
      }
    },
    "modelVersion": {
      "type": "string",
      "defaultValue": "2024-11-20",
      "metadata": {
        "description": "The version of your model"
      }
    },
    "modelSkuName": {
      "type": "string",
      "defaultValue": "GlobalStandard",
      "metadata": {
        "description": "The sku of your model deployment"
      }
    },
    "modelCapacity": {
      "type": "int",
      "defaultValue": 30,
      "metadata": {
        "description": "The tokens per minute (TPM) of your model deployment"
      }
    },
    "firstProjectName": {
      "type": "string",
      "defaultValue": "project",
      "metadata": {
        "description": "Name for your project resource."
      }
    },
    "projectDescription": {
      "type": "string",
      "defaultValue": "A project for the AI Foundry account with network secured deployed Agent",
      "metadata": {
        "description": "This project will be a sub-resource of your account"
      }
    },
    "displayName": {
      "type": "string",
      "defaultValue": "network secured agent project",
      "metadata": {
        "description": "The display name of the project"
      }
    },
    "vnetName": {
      "type": "string",
      "metadata": {
        "description": "Virtual Network name for the Agent to create new or existing virtual network"
      }
    },
    "agentSubnetName": {
      "type": "string",
      "metadata": {
        "description": "The name of Agents Subnet to create new or existing subnet for agents"
      }
    },
    "acaSubnetName": {
      "type": "string",
      "defaultValue": "aca-subnet",
      "metadata": {
        "description": "The name of ACA infrastructure Subnet (new)"
      }
    },
    "peSubnetName": {
      "type": "string",
      "defaultValue": "pe-subnet",
      "metadata": {
        "description": "The name of Private Endpoint subnet to create new or existing subnet for private endpoints"
      }
    },
    "existingVnetResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Existing Virtual Network name Resource ID"
      }
    },
    "vnetAddressPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Address space for the VNet (only used for new VNet)"
      }
    },
    "agentSubnetPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Address prefix for the agent subnet. The default value will be calculated dynamically to avoid conflicts"
      }
    },
    "acaSubnetPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Address prefix for the ACA infrastructure subnet"
      }
    },
    "peSubnetPrefix": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "Address prefix for the private endpoint subnet"
      }
    },
    "aiSearchResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The AI Search Service full ARM Resource ID. This is an optional field, and if not provided, the resource will be created."
      }
    },
    "azureStorageAccountResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The AI Storage Account full ARM Resource ID. This is an optional field, and if not provided, the resource will be created."
      }
    },
    "azureCosmosDBAccountResourceId": {
      "type": "string",
      "defaultValue": "",
      "metadata": {
        "description": "The Cosmos DB Account full ARM Resource ID. This is an optional field, and if not provided, the resource will be created."
      }
    },
    "enableBingSearch": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Enable Bing Search for web search capabilities"
      }
    },
    "containerAppIngressType": {
      "type": "string",
      "defaultValue": "internal",
      "allowedValues": [
        "external",
        "internal"
      ],
      "metadata": {
        "description": "Container App ingress type: external (internet-accessible) or internal (VNet-only)"
      }
    },
    "createContainerApp": {
      "type": "bool",
      "defaultValue": true,
      "metadata": {
        "description": "Create the Container App during infra provisioning (set false for two-phase deploy)."
      }
    },
    "existingDnsZones": {
      "type": "object",
      "metadata": {
        "description": "Object mapping DNS zone names to their resource group, or empty string to indicate creation"
      }
    },
    "dnsZoneNames": {
      "type": "array",
      "metadata": {
        "description": "Zone Names for Validation of existing Private Dns Zones"
      }
    },
    "projectCapHost": {
      "type": "string",
      "defaultValue": "caphostproj",
      "metadata": {
        "description": "The name of the project capability host to be created"
      }
    }
  },
  "variables": {
    "azdTags": "[union(parameters('tags'), createObject('azd-env-name', parameters('environmentName'), 'azd-service-name', 'api'))]",
    "uniqueSuffix": "[substring(uniqueString(subscription().id, resourceGroup().id, parameters('location'), parameters('environmentName')), 0, 4)]",
    "aiAccountName": "[toLower(format('aifoundry-{0}', variables('uniqueSuffix')))]",
    "storageAccountName": "[toLower(format('storage{0}', variables('uniqueSuffix')))]",
    "cosmosAccountName": "[toLower(format('cosmos-{0}', variables('uniqueSuffix')))]",
    "searchAccountName": "[toLower(format('aisearch-{0}', variables('uniqueSuffix')))]",
    "bingSearchName": "[toLower(format('bing-{0}', variables('uniqueSuffix')))]",
    "projectName": "[toLower(format('{0}{1}', parameters('firstProjectName'), variables('uniqueSuffix')))]",
    "cosmosDBName": "[variables('cosmosAccountName')]",
    "aiSearchName": "[variables('searchAccountName')]",
    "azureStorageName": "[variables('storageAccountName')]",
    "containerAppName": "[toLower(format('aca-{0}', variables('uniqueSuffix')))]",
    "containerAppEnvironmentName": "[toLower(format('cae-{0}', variables('uniqueSuffix')))]",
    "containerRegistryName": "[toLower(format('acr{0}', variables('uniqueSuffix')))]",
    "storagePassedIn": "[not(equals(parameters('azureStorageAccountResourceId'), ''))]",
    "searchPassedIn": "[not(equals(parameters('aiSearchResourceId'), ''))]",
    "cosmosPassedIn": "[not(equals(parameters('azureCosmosDBAccountResourceId'), ''))]",
    "existingVnetPassedIn": "[not(equals(parameters('existingVnetResourceId'), ''))]",
    "acsParts": "[split(parameters('aiSearchResourceId'), '/')]",
    "aiSearchServiceSubscriptionId": "[if(variables('searchPassedIn'), variables('acsParts')[2], subscription().subscriptionId)]",
    "aiSearchServiceResourceGroupName": "[if(variables('searchPassedIn'), variables('acsParts')[4], resourceGroup().name)]",
    "cosmosParts": "[split(parameters('azureCosmosDBAccountResourceId'), '/')]",
    "cosmosDBSubscriptionId": "[if(variables('cosmosPassedIn'), variables('cosmosParts')[2], subscription().subscriptionId)]",
    "cosmosDBResourceGroupName": "[if(variables('cosmosPassedIn'), variables('cosmosParts')[4], resourceGroup().name)]",
    "storageParts": "[split(parameters('azureStorageAccountResourceId'), '/')]",
    "azureStorageSubscriptionId": "[if(variables('storagePassedIn'), variables('storageParts')[2], subscription().subscriptionId)]",
    "azureStorageResourceGroupName": "[if(variables('storagePassedIn'), variables('storageParts')[4], resourceGroup().name)]",
    "vnetParts": "[split(parameters('existingVnetResourceId'), '/')]",
    "vnetSubscriptionId": "[if(variables('existingVnetPassedIn'), variables('vnetParts')[2], subscription().subscriptionId)]",
    "vnetResourceGroupName": "[if(variables('existingVnetPassedIn'), variables('vnetParts')[4], resourceGroup().name)]",
    "existingVnetName": "[if(variables('existingVnetPassedIn'), last(variables('vnetParts')), parameters('vnetName'))]",
    "trimVnetName": "[trim(variables('existingVnetName'))]"
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "vnetName": {
            "value": "[variables('trimVnetName')]"
          },
          "useExistingVnet": {
            "value": "[variables('existingVnetPassedIn')]"
          },
          "existingVnetResourceGroupName": {
            "value": "[variables('vnetResourceGroupName')]"
          },
          "agentSubnetName": {
            "value": "[parameters('agentSubnetName')]"
          },
          "acaSubnetName": {
            "value": "[parameters('acaSubnetName')]"
          },
          "peSubnetName": {
            "value": "[parameters('peSubnetName')]"
          },
          "vnetAddressPrefix": {
            "value": "[parameters('vnetAddressPrefix')]"
          },
          "agentSubnetPrefix": {
            "value": "[parameters('agentSubnetPrefix')]"
          },
          "acaSubnetPrefix": {
            "value": "[parameters('acaSubnetPrefix')]"
          },
          "peSubnetPrefix": {
            "value": "[parameters('peSubnetPrefix')]"
          },
          "existingVnetSubscriptionId": {
            "value": "[variables('vnetSubscriptionId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "11587629556518943812"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region for the deployment"
              }
            },
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "The name of the virtual network"
              }
            },
            "useExistingVnet": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Create new VNet (false) or configure existing VNet (true)"
              }
            },
            "existingVnetSubscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "Subscription ID of existing VNet (if different from current)"
              }
            },
            "existingVnetResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Resource Group of existing VNet (if different from current)"
              }
            },
            "agentSubnetName": {
              "type": "string",
              "defaultValue": "agent-subnet",
              "metadata": {
                "description": "Name of AI Services agent subnet"
              }
            },
            "peSubnetName": {
              "type": "string",
              "defaultValue": "pe-subnet",
              "metadata": {
                "description": "Name of Private Endpoint subnet"
              }
            },
            "acaSubnetName": {
              "type": "string",
              "defaultValue": "aca-subnet",
              "metadata": {
                "description": "Name of Container Apps infrastructure subnet"
              }
            },
            "vnetAddressPrefix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Address space for new VNet (ignored if using existing)"
              }
            },
            "agentSubnetPrefix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Address prefix for agent subnet"
              }
            },
            "acaSubnetPrefix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Address prefix for ACA subnet"
              }
            },
            "peSubnetPrefix": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Address prefix for private endpoint subnet"
              }
            }
          },
          "resources": [
            {
              "condition": "[not(parameters('useExistingVnet'))]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "vnet-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "agentSubnetName": {
                    "value": "[parameters('agentSubnetName')]"
                  },
                  "acaSubnetName": {
                    "value": "[parameters('acaSubnetName')]"
                  },
                  "peSubnetName": {
                    "value": "[parameters('peSubnetName')]"
                  },
                  "vnetAddressPrefix": {
                    "value": "[parameters('vnetAddressPrefix')]"
                  },
                  "agentSubnetPrefix": {
                    "value": "[parameters('agentSubnetPrefix')]"
                  },
                  "acaSubnetPrefix": {
                    "value": "[parameters('acaSubnetPrefix')]"
                  },
                  "peSubnetPrefix": {
                    "value": "[parameters('peSubnetPrefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "9776858956604634127"
                    }
                  },
                  "parameters": {
                    "location": {
                      "type": "string",
                      "metadata": {
                        "description": "Azure region for the deployment"
                      }
                    },
                    "vnetName": {
                      "type": "string",
                      "defaultValue": "ai-agent-vnet",
                      "metadata": {
                        "description": "The name of the virtual network"
                      }
                    },
                    "agentSubnetName": {
                      "type": "string",
                      "defaultValue": "agent-subnet",
                      "metadata": {
                        "description": "The name of AI Services agent subnet"
                      }
                    },
                    "acaSubnetName": {
                      "type": "string",
                      "defaultValue": "aca-subnet",
                      "metadata": {
                        "description": "The name of the Container Apps infrastructure subnet"
                      }
                    },
                    "peSubnetName": {
                      "type": "string",
                      "defaultValue": "pe-subnet",
                      "metadata": {
                        "description": "The name of Private Endpoint subnet"
                      }
                    },
                    "vnetAddressPrefix": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Address space for the VNet"
                      }
                    },
                    "agentSubnetPrefix": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Address prefix for the agent subnet"
                      }
                    },
                    "acaSubnetPrefix": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Address prefix for the ACA subnet (infrastructure subnet for Container Apps)"
                      }
                    },
                    "peSubnetPrefix": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Address prefix for the private endpoint subnet"
                      }
                    }
                  },
                  "variables": {
                    "defaultVnetAddressPrefix": "172.25.0.0/16",
                    "vnetAddress": "[if(empty(parameters('vnetAddressPrefix')), variables('defaultVnetAddressPrefix'), parameters('vnetAddressPrefix'))]",
                    "agentSubnet": "[if(empty(parameters('agentSubnetPrefix')), cidrSubnet(variables('vnetAddress'), 8, 0), parameters('agentSubnetPrefix'))]",
                    "peSubnet": "[if(empty(parameters('peSubnetPrefix')), cidrSubnet(variables('vnetAddress'), 8, 1), parameters('peSubnetPrefix'))]",
                    "acaSubnet": "[if(empty(parameters('acaSubnetPrefix')), cidrSubnet(variables('vnetAddress'), 7, 1), parameters('acaSubnetPrefix'))]"
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/virtualNetworks",
                      "apiVersion": "2024-05-01",
                      "name": "[parameters('vnetName')]",
                      "location": "[parameters('location')]",
                      "properties": {
                        "addressSpace": {
                          "addressPrefixes": [
                            "[variables('vnetAddress')]"
                          ]
                        },
                        "subnets": [
                          {
                            "name": "[parameters('agentSubnetName')]",
                            "properties": {
                              "addressPrefix": "[variables('agentSubnet')]",
                              "delegations": [
                                {
                                  "name": "Microsoft.App_environments",
                                  "properties": {
                                    "serviceName": "Microsoft.App/environments"
                                  }
                                }
                              ]
                            }
                          },
                          {
                            "name": "[parameters('acaSubnetName')]",
                            "properties": {
                              "addressPrefix": "[variables('acaSubnet')]"
                            }
                          },
                          {
                            "name": "[parameters('peSubnetName')]",
                            "properties": {
                              "addressPrefix": "[variables('peSubnet')]"
                            }
                          }
                        ]
                      }
                    }
                  ],
                  "outputs": {
                    "virtualNetworkName": {
                      "type": "string",
                      "value": "[parameters('vnetName')]"
                    },
                    "virtualNetworkId": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                    },
                    "virtualNetworkResourceGroup": {
                      "type": "string",
                      "value": "[resourceGroup().name]"
                    },
                    "virtualNetworkSubscriptionId": {
                      "type": "string",
                      "value": "[subscription().subscriptionId]"
                    },
                    "agentSubnetName": {
                      "type": "string",
                      "value": "[parameters('agentSubnetName')]"
                    },
                    "agentSubnetId": {
                      "type": "string",
                      "value": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), parameters('agentSubnetName'))]"
                    },
                    "acaSubnetName": {
                      "type": "string",
                      "value": "[parameters('acaSubnetName')]"
                    },
                    "acaSubnetId": {
                      "type": "string",
                      "value": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), parameters('acaSubnetName'))]"
                    },
                    "peSubnetName": {
                      "type": "string",
                      "value": "[parameters('peSubnetName')]"
                    },
                    "peSubnetId": {
                      "type": "string",
                      "value": "[format('{0}/subnets/{1}', resourceId('Microsoft.Network/virtualNetworks', parameters('vnetName')), parameters('peSubnetName'))]"
                    }
                  }
                }
              }
            },
            {
              "condition": "[parameters('useExistingVnet')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "vnet-subnets-deployment",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "vnetName": {
                    "value": "[parameters('vnetName')]"
                  },
                  "vnetResourceGroupName": {
                    "value": "[parameters('existingVnetResourceGroupName')]"
                  },
                  "vnetSubscriptionId": {
                    "value": "[parameters('existingVnetSubscriptionId')]"
                  },
                  "agentSubnetName": {
                    "value": "[parameters('agentSubnetName')]"
                  },
                  "acaSubnetName": {
                    "value": "[parameters('acaSubnetName')]"
                  },
                  "peSubnetName": {
                    "value": "[parameters('peSubnetName')]"
                  },
                  "agentSubnetPrefix": {
                    "value": "[parameters('agentSubnetPrefix')]"
                  },
                  "acaSubnetPrefix": {
                    "value": "[parameters('acaSubnetPrefix')]"
                  },
                  "peSubnetPrefix": {
                    "value": "[parameters('peSubnetPrefix')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.36.177.2456",
                      "templateHash": "9196384901380624416"
                    }
                  },
                  "parameters": {
                    "vnetName": {
                      "type": "string",
                      "metadata": {
                        "description": "The name of the existing virtual network"
                      }
                    },
                    "vnetSubscriptionId": {
                      "type": "string",
                      "defaultValue": "[subscription().subscriptionId]",
                      "metadata": {
                        "description": "Subscription ID of the VNet (if different from current)"
                      }
                    },
                    "vnetResourceGroupName": {
                      "type": "string",
                      "defaultValue": "[resourceGroup().name]",
                      "metadata": {
                        "description": "Resource Group name of the VNet (if different from current)"
                      }
                    },
                    "agentSubnetName": {
                      "type": "string",
                      "defaultValue": "agent-subnet",
                      "metadata": {
                        "description": "The name of AI Services agent subnet"
                      }
                    },
                    "acaSubnetName": {
                      "type": "string",
                      "defaultValue": "aca-subnet",
                      "metadata": {
                        "description": "The name of Container Apps infrastructure subnet"
                      }
                    },
                    "peSubnetName": {
                      "type": "string",
                      "defaultValue": "pe-subnet",
                      "metadata": {
                        "description": "The name of Private Endpoint subnet"
                      }
                    },
                    "agentSubnetPrefix": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Address prefix for the agent subnet (required if subnet does not exist)"
                      }
                    },
                    "acaSubnetPrefix": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Address prefix for the ACA subnet (required if subnet does not exist)"
                      }
                    },
                    "peSubnetPrefix": {
                      "type": "string",
                      "defaultValue": "",
                      "metadata": {
                        "description": "Address prefix for the private endpoint subnet (required if subnet does not exist)"
                      }
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('agent-subnet-{0}', uniqueString(deployment().name, parameters('agentSubnetName')))]",
                      "resourceGroup": "[parameters('vnetResourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "subnetName": {
                            "value": "[parameters('agentSubnetName')]"
                          },
                          "addressPrefix": "[if(empty(parameters('agentSubnetPrefix')), createObject('value', cidrSubnet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')), '2024-05-01').addressSpace.addressPrefixes[0], 8, 0)), createObject('value', parameters('agentSubnetPrefix')))]",
                          "delegations": {
                            "value": [
                              {
                                "name": "Microsoft.App/environments",
                                "properties": {
                                  "serviceName": "Microsoft.App/environments"
                                }
                              }
                            ]
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.177.2456",
                              "templateHash": "12391563573394056841"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the virtual network"
                              }
                            },
                            "subnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the subnet"
                              }
                            },
                            "addressPrefix": {
                              "type": "string",
                              "metadata": {
                                "description": "Address prefix for the subnet (CIDR notation)"
                              }
                            },
                            "delegations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Array of subnet delegations for specific Azure services"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/subnets",
                              "apiVersion": "2024-05-01",
                              "name": "[format('{0}/{1}', parameters('vnetName'), parameters('subnetName'))]",
                              "properties": {
                                "addressPrefix": "[parameters('addressPrefix')]",
                                "delegations": "[parameters('delegations')]"
                              }
                            }
                          ],
                          "outputs": {
                            "subnetId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[1])]"
                            },
                            "subnetName": {
                              "type": "string",
                              "value": "[parameters('subnetName')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('aca-subnet-{0}', uniqueString(deployment().name, parameters('acaSubnetName')))]",
                      "resourceGroup": "[parameters('vnetResourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "subnetName": {
                            "value": "[parameters('acaSubnetName')]"
                          },
                          "addressPrefix": "[if(empty(parameters('acaSubnetPrefix')), createObject('value', cidrSubnet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')), '2024-05-01').addressSpace.addressPrefixes[0], 7, 1)), createObject('value', parameters('acaSubnetPrefix')))]",
                          "delegations": {
                            "value": []
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.177.2456",
                              "templateHash": "12391563573394056841"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the virtual network"
                              }
                            },
                            "subnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the subnet"
                              }
                            },
                            "addressPrefix": {
                              "type": "string",
                              "metadata": {
                                "description": "Address prefix for the subnet (CIDR notation)"
                              }
                            },
                            "delegations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Array of subnet delegations for specific Azure services"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/subnets",
                              "apiVersion": "2024-05-01",
                              "name": "[format('{0}/{1}', parameters('vnetName'), parameters('subnetName'))]",
                              "properties": {
                                "addressPrefix": "[parameters('addressPrefix')]",
                                "delegations": "[parameters('delegations')]"
                              }
                            }
                          ],
                          "outputs": {
                            "subnetId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[1])]"
                            },
                            "subnetName": {
                              "type": "string",
                              "value": "[parameters('subnetName')]"
                            }
                          }
                        }
                      }
                    },
                    {
                      "type": "Microsoft.Resources/deployments",
                      "apiVersion": "2022-09-01",
                      "name": "[format('pe-subnet-{0}', uniqueString(deployment().name, parameters('peSubnetName')))]",
                      "resourceGroup": "[parameters('vnetResourceGroupName')]",
                      "properties": {
                        "expressionEvaluationOptions": {
                          "scope": "inner"
                        },
                        "mode": "Incremental",
                        "parameters": {
                          "vnetName": {
                            "value": "[parameters('vnetName')]"
                          },
                          "subnetName": {
                            "value": "[parameters('peSubnetName')]"
                          },
                          "addressPrefix": "[if(empty(parameters('peSubnetPrefix')), createObject('value', cidrSubnet(reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')), '2024-05-01').addressSpace.addressPrefixes[0], 8, 1)), createObject('value', parameters('peSubnetPrefix')))]",
                          "delegations": {
                            "value": []
                          }
                        },
                        "template": {
                          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                          "contentVersion": "1.0.0.0",
                          "metadata": {
                            "_generator": {
                              "name": "bicep",
                              "version": "0.36.177.2456",
                              "templateHash": "12391563573394056841"
                            }
                          },
                          "parameters": {
                            "vnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the virtual network"
                              }
                            },
                            "subnetName": {
                              "type": "string",
                              "metadata": {
                                "description": "Name of the subnet"
                              }
                            },
                            "addressPrefix": {
                              "type": "string",
                              "metadata": {
                                "description": "Address prefix for the subnet (CIDR notation)"
                              }
                            },
                            "delegations": {
                              "type": "array",
                              "defaultValue": [],
                              "metadata": {
                                "description": "Array of subnet delegations for specific Azure services"
                              }
                            }
                          },
                          "resources": [
                            {
                              "type": "Microsoft.Network/virtualNetworks/subnets",
                              "apiVersion": "2024-05-01",
                              "name": "[format('{0}/{1}', parameters('vnetName'), parameters('subnetName'))]",
                              "properties": {
                                "addressPrefix": "[parameters('addressPrefix')]",
                                "delegations": "[parameters('delegations')]"
                              }
                            }
                          ],
                          "outputs": {
                            "subnetId": {
                              "type": "string",
                              "value": "[resourceId('Microsoft.Network/virtualNetworks/subnets', split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[0], split(format('{0}/{1}', parameters('vnetName'), parameters('subnetName')), '/')[1])]"
                            },
                            "subnetName": {
                              "type": "string",
                              "value": "[parameters('subnetName')]"
                            }
                          }
                        }
                      }
                    }
                  ],
                  "outputs": {
                    "virtualNetworkName": {
                      "type": "string",
                      "value": "[parameters('vnetName')]"
                    },
                    "virtualNetworkId": {
                      "type": "string",
                      "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                    },
                    "virtualNetworkResourceGroup": {
                      "type": "string",
                      "value": "[parameters('vnetResourceGroupName')]"
                    },
                    "virtualNetworkSubscriptionId": {
                      "type": "string",
                      "value": "[parameters('vnetSubscriptionId')]"
                    },
                    "agentSubnetName": {
                      "type": "string",
                      "value": "[parameters('agentSubnetName')]"
                    },
                    "agentSubnetId": {
                      "type": "string",
                      "value": "[format('{0}/subnets/{1}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')), parameters('agentSubnetName'))]"
                    },
                    "acaSubnetName": {
                      "type": "string",
                      "value": "[parameters('acaSubnetName')]"
                    },
                    "acaSubnetId": {
                      "type": "string",
                      "value": "[format('{0}/subnets/{1}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')), parameters('acaSubnetName'))]"
                    },
                    "peSubnetName": {
                      "type": "string",
                      "value": "[parameters('peSubnetName')]"
                    },
                    "peSubnetId": {
                      "type": "string",
                      "value": "[format('{0}/subnets/{1}', extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName')), parameters('peSubnetName'))]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "virtualNetworkName": {
              "type": "string",
              "value": "[if(parameters('useExistingVnet'), reference(resourceId('Microsoft.Resources/deployments', 'vnet-subnets-deployment'), '2022-09-01').outputs.virtualNetworkName.value, reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.virtualNetworkName.value)]"
            },
            "virtualNetworkId": {
              "type": "string",
              "value": "[if(parameters('useExistingVnet'), reference(resourceId('Microsoft.Resources/deployments', 'vnet-subnets-deployment'), '2022-09-01').outputs.virtualNetworkId.value, reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.virtualNetworkId.value)]"
            },
            "virtualNetworkSubscriptionId": {
              "type": "string",
              "value": "[if(parameters('useExistingVnet'), reference(resourceId('Microsoft.Resources/deployments', 'vnet-subnets-deployment'), '2022-09-01').outputs.virtualNetworkSubscriptionId.value, reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.virtualNetworkSubscriptionId.value)]"
            },
            "virtualNetworkResourceGroup": {
              "type": "string",
              "value": "[if(parameters('useExistingVnet'), reference(resourceId('Microsoft.Resources/deployments', 'vnet-subnets-deployment'), '2022-09-01').outputs.virtualNetworkResourceGroup.value, reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.virtualNetworkResourceGroup.value)]"
            },
            "agentSubnetName": {
              "type": "string",
              "value": "[parameters('agentSubnetName')]"
            },
            "agentSubnetId": {
              "type": "string",
              "value": "[if(parameters('useExistingVnet'), reference(resourceId('Microsoft.Resources/deployments', 'vnet-subnets-deployment'), '2022-09-01').outputs.agentSubnetId.value, reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.agentSubnetId.value)]"
            },
            "acaSubnetName": {
              "type": "string",
              "value": "[if(parameters('useExistingVnet'), reference(resourceId('Microsoft.Resources/deployments', 'vnet-subnets-deployment'), '2022-09-01').outputs.acaSubnetName.value, reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.acaSubnetName.value)]"
            },
            "acaSubnetId": {
              "type": "string",
              "value": "[if(parameters('useExistingVnet'), reference(resourceId('Microsoft.Resources/deployments', 'vnet-subnets-deployment'), '2022-09-01').outputs.acaSubnetId.value, reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.acaSubnetId.value)]"
            },
            "peSubnetName": {
              "type": "string",
              "value": "[parameters('peSubnetName')]"
            },
            "peSubnetId": {
              "type": "string",
              "value": "[if(parameters('useExistingVnet'), reference(resourceId('Microsoft.Resources/deployments', 'vnet-subnets-deployment'), '2022-09-01').outputs.peSubnetId.value, reference(resourceId('Microsoft.Resources/deployments', 'vnet-deployment'), '2022-09-01').outputs.peSubnetId.value)]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ai-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "accountName": {
            "value": "[variables('aiAccountName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "modelName": {
            "value": "[parameters('modelName')]"
          },
          "modelFormat": {
            "value": "[parameters('modelFormat')]"
          },
          "modelVersion": {
            "value": "[parameters('modelVersion')]"
          },
          "modelSkuName": {
            "value": "[parameters('modelSkuName')]"
          },
          "modelCapacity": {
            "value": "[parameters('modelCapacity')]"
          },
          "agentSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix'))), '2022-09-01').outputs.agentSubnetId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "4526934170921473590"
            }
          },
          "parameters": {
            "accountName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "modelName": {
              "type": "string"
            },
            "modelFormat": {
              "type": "string"
            },
            "modelVersion": {
              "type": "string"
            },
            "modelSkuName": {
              "type": "string"
            },
            "modelCapacity": {
              "type": "int"
            },
            "agentSubnetId": {
              "type": "string"
            },
            "networkInjection": {
              "type": "string",
              "defaultValue": "true"
            }
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts",
              "apiVersion": "2025-04-01-preview",
              "name": "[parameters('accountName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "S0"
              },
              "kind": "AIServices",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "allowProjectManagement": true,
                "customSubDomainName": "[parameters('accountName')]",
                "networkAcls": {
                  "defaultAction": "Allow",
                  "virtualNetworkRules": [],
                  "ipRules": []
                },
                "publicNetworkAccess": "Disabled",
                "networkInjections": "[if(equals(parameters('networkInjection'), 'true'), createArray(createObject('scenario', 'agent', 'subnetArmId', parameters('agentSubnetId'), 'useMicrosoftManagedNetwork', false())), null())]",
                "disableLocalAuth": false
              }
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/deployments",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', parameters('accountName'), parameters('modelName'))]",
              "sku": {
                "capacity": "[parameters('modelCapacity')]",
                "name": "[parameters('modelSkuName')]"
              },
              "properties": {
                "model": {
                  "name": "[parameters('modelName')]",
                  "format": "[parameters('modelFormat')]",
                  "version": "[parameters('modelVersion')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts', parameters('accountName'))]"
              ]
            }
          ],
          "outputs": {
            "accountName": {
              "type": "string",
              "value": "[parameters('accountName')]"
            },
            "accountID": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('accountName'))]"
            },
            "accountTarget": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('accountName')), '2025-04-01-preview').endpoint]"
            },
            "accountPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts', parameters('accountName')), '2025-04-01-preview', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('validate-existing-resources-{0}-deployment', variables('uniqueSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aiSearchResourceId": {
            "value": "[parameters('aiSearchResourceId')]"
          },
          "azureStorageAccountResourceId": {
            "value": "[parameters('azureStorageAccountResourceId')]"
          },
          "azureCosmosDBAccountResourceId": {
            "value": "[parameters('azureCosmosDBAccountResourceId')]"
          },
          "existingDnsZones": {
            "value": "[parameters('existingDnsZones')]"
          },
          "dnsZoneNames": {
            "value": "[parameters('dnsZoneNames')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "1931459936886912202"
            }
          },
          "parameters": {
            "aiSearchResourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the AI Search Service."
              }
            },
            "azureStorageAccountResourceId": {
              "type": "string",
              "metadata": {
                "description": "Resource ID of the Azure Storage Account."
              }
            },
            "azureCosmosDBAccountResourceId": {
              "type": "string",
              "metadata": {
                "description": "ResourceId of Cosmos DB Account"
              }
            },
            "existingDnsZones": {
              "type": "object",
              "metadata": {
                "description": "Object mapping DNS zone names to their resource group, or empty string to indicate creation"
              }
            },
            "dnsZoneNames": {
              "type": "array",
              "metadata": {
                "description": "List of private DNS zone names to validate"
              }
            }
          },
          "variables": {
            "storagePassedIn": "[not(equals(parameters('azureStorageAccountResourceId'), ''))]",
            "searchPassedIn": "[not(equals(parameters('aiSearchResourceId'), ''))]",
            "cosmosPassedIn": "[not(equals(parameters('azureCosmosDBAccountResourceId'), ''))]",
            "storageParts": "[split(parameters('azureStorageAccountResourceId'), '/')]",
            "azureStorageSubscriptionId": "[if(and(variables('storagePassedIn'), greater(length(variables('storageParts')), 2)), variables('storageParts')[2], subscription().subscriptionId)]",
            "azureStorageResourceGroupName": "[if(and(variables('storagePassedIn'), greater(length(variables('storageParts')), 4)), variables('storageParts')[4], resourceGroup().name)]",
            "acsParts": "[split(parameters('aiSearchResourceId'), '/')]",
            "aiSearchServiceSubscriptionId": "[if(and(variables('searchPassedIn'), greater(length(variables('acsParts')), 2)), variables('acsParts')[2], subscription().subscriptionId)]",
            "aiSearchServiceResourceGroupName": "[if(and(variables('searchPassedIn'), greater(length(variables('acsParts')), 4)), variables('acsParts')[4], resourceGroup().name)]",
            "cosmosParts": "[split(parameters('azureCosmosDBAccountResourceId'), '/')]",
            "cosmosDBSubscriptionId": "[if(and(variables('cosmosPassedIn'), greater(length(variables('cosmosParts')), 2)), variables('cosmosParts')[2], subscription().subscriptionId)]",
            "cosmosDBResourceGroupName": "[if(and(variables('cosmosPassedIn'), greater(length(variables('cosmosParts')), 4)), variables('cosmosParts')[4], resourceGroup().name)]",
            "dnsZoneTypes": [
              "Microsoft.Network/privateDnsZones"
            ]
          },
          "resources": [],
          "outputs": {
            "aiSearchExists": {
              "type": "bool",
              "value": "[and(variables('searchPassedIn'), equals(last(split(parameters('aiSearchResourceId'), '/')), variables('acsParts')[8]))]"
            },
            "cosmosDBExists": {
              "type": "bool",
              "value": "[and(variables('cosmosPassedIn'), equals(last(split(parameters('azureCosmosDBAccountResourceId'), '/')), variables('cosmosParts')[8]))]"
            },
            "azureStorageExists": {
              "type": "bool",
              "value": "[and(variables('storagePassedIn'), equals(last(split(parameters('azureStorageAccountResourceId'), '/')), variables('storageParts')[8]))]"
            },
            "aiSearchServiceSubscriptionId": {
              "type": "string",
              "value": "[variables('aiSearchServiceSubscriptionId')]"
            },
            "aiSearchServiceResourceGroupName": {
              "type": "string",
              "value": "[variables('aiSearchServiceResourceGroupName')]"
            },
            "cosmosDBSubscriptionId": {
              "type": "string",
              "value": "[variables('cosmosDBSubscriptionId')]"
            },
            "cosmosDBResourceGroupName": {
              "type": "string",
              "value": "[variables('cosmosDBResourceGroupName')]"
            },
            "azureStorageSubscriptionId": {
              "type": "string",
              "value": "[variables('azureStorageSubscriptionId')]"
            },
            "azureStorageResourceGroupName": {
              "type": "string",
              "value": "[variables('azureStorageResourceGroupName')]"
            },
            "dnsZoneExists": {
              "type": "array",
              "copy": {
                "count": "[length(parameters('dnsZoneNames'))]",
                "input": {
                  "name": "[parameters('dnsZoneNames')[copyIndex()]]",
                  "exists": "[not(empty(parameters('existingDnsZones')[parameters('dnsZoneNames')[copyIndex()]]))]"
                }
              }
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "azureStorageName": {
            "value": "[variables('azureStorageName')]"
          },
          "aiSearchName": {
            "value": "[variables('aiSearchName')]"
          },
          "cosmosDBName": {
            "value": "[variables('cosmosDBName')]"
          },
          "aiSearchResourceId": {
            "value": "[parameters('aiSearchResourceId')]"
          },
          "aiSearchExists": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('validate-existing-resources-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.aiSearchExists.value]"
          },
          "azureStorageAccountResourceId": {
            "value": "[parameters('azureStorageAccountResourceId')]"
          },
          "azureStorageExists": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('validate-existing-resources-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.azureStorageExists.value]"
          },
          "cosmosDBResourceId": {
            "value": "[parameters('azureCosmosDBAccountResourceId')]"
          },
          "cosmosDBExists": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('validate-existing-resources-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.cosmosDBExists.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "17085402746931833756"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Azure region of the deployment"
              }
            },
            "aiSearchName": {
              "type": "string",
              "metadata": {
                "description": "The name of the AI Search resource"
              }
            },
            "azureStorageName": {
              "type": "string",
              "metadata": {
                "description": "Name of the storage account"
              }
            },
            "cosmosDBName": {
              "type": "string",
              "metadata": {
                "description": "Name of the new Cosmos DB account"
              }
            },
            "aiSearchResourceId": {
              "type": "string",
              "metadata": {
                "description": "The AI Search Service full ARM Resource ID. This is an optional field, and if not provided, the resource will be created."
              }
            },
            "azureStorageAccountResourceId": {
              "type": "string",
              "metadata": {
                "description": "The AI Storage Account full ARM Resource ID. This is an optional field, and if not provided, the resource will be created."
              }
            },
            "cosmosDBResourceId": {
              "type": "string",
              "metadata": {
                "description": "The Cosmos DB Account full ARM Resource ID. This is an optional field, and if not provided, the resource will be created."
              }
            },
            "aiSearchExists": {
              "type": "bool"
            },
            "azureStorageExists": {
              "type": "bool"
            },
            "cosmosDBExists": {
              "type": "bool"
            },
            "noZRSRegions": {
              "type": "array",
              "defaultValue": [
                "southindia",
                "westus"
              ]
            },
            "sku": {
              "type": "object",
              "defaultValue": "[if(contains(parameters('noZRSRegions'), parameters('location')), createObject('name', 'Standard_GRS'), createObject('name', 'Standard_ZRS'))]"
            }
          },
          "variables": {
            "cosmosParts": "[split(parameters('cosmosDBResourceId'), '/')]",
            "canaryRegions": [
              "eastus2euap",
              "centraluseuap"
            ],
            "cosmosDbRegion": "[if(contains(variables('canaryRegions'), parameters('location')), 'westus', parameters('location'))]",
            "acsParts": "[split(parameters('aiSearchResourceId'), '/')]",
            "azureStorageParts": "[split(parameters('azureStorageAccountResourceId'), '/')]"
          },
          "resources": [
            {
              "condition": "[not(parameters('cosmosDBExists'))]",
              "type": "Microsoft.DocumentDB/databaseAccounts",
              "apiVersion": "2024-11-15",
              "name": "[parameters('cosmosDBName')]",
              "location": "[variables('cosmosDbRegion')]",
              "kind": "GlobalDocumentDB",
              "properties": {
                "consistencyPolicy": {
                  "defaultConsistencyLevel": "Session"
                },
                "disableLocalAuth": true,
                "enableAutomaticFailover": false,
                "enableMultipleWriteLocations": false,
                "publicNetworkAccess": "Disabled",
                "enableFreeTier": false,
                "locations": [
                  {
                    "locationName": "[parameters('location')]",
                    "failoverPriority": 0,
                    "isZoneRedundant": false
                  }
                ],
                "databaseAccountOfferType": "Standard"
              }
            },
            {
              "condition": "[not(parameters('aiSearchExists'))]",
              "type": "Microsoft.Search/searchServices",
              "apiVersion": "2024-06-01-preview",
              "name": "[parameters('aiSearchName')]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "disableLocalAuth": false,
                "authOptions": {
                  "aadOrApiKey": {
                    "aadAuthFailureMode": "http401WithBearerChallenge"
                  }
                },
                "encryptionWithCmk": {
                  "enforcement": "Unspecified"
                },
                "hostingMode": "default",
                "partitionCount": 1,
                "publicNetworkAccess": "disabled",
                "replicaCount": 1,
                "semanticSearch": "disabled",
                "networkRuleSet": {
                  "bypass": "None",
                  "ipRules": []
                }
              },
              "sku": {
                "name": "standard"
              }
            },
            {
              "condition": "[not(parameters('azureStorageExists'))]",
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2023-05-01",
              "name": "[parameters('azureStorageName')]",
              "location": "[parameters('location')]",
              "kind": "StorageV2",
              "sku": "[parameters('sku')]",
              "properties": {
                "minimumTlsVersion": "TLS1_2",
                "allowBlobPublicAccess": false,
                "publicNetworkAccess": "Disabled",
                "networkAcls": {
                  "bypass": "AzureServices",
                  "defaultAction": "Deny",
                  "virtualNetworkRules": []
                },
                "allowSharedKeyAccess": false
              }
            }
          ],
          "outputs": {
            "aiSearchName": {
              "type": "string",
              "value": "[if(parameters('aiSearchExists'), variables('acsParts')[8], parameters('aiSearchName'))]"
            },
            "aiSearchID": {
              "type": "string",
              "value": "[if(parameters('aiSearchExists'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('acsParts')[2], variables('acsParts')[4]), 'Microsoft.Search/searchServices', variables('acsParts')[8]), resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')))]"
            },
            "aiSearchServiceResourceGroupName": {
              "type": "string",
              "value": "[if(parameters('aiSearchExists'), variables('acsParts')[4], resourceGroup().name)]"
            },
            "aiSearchServiceSubscriptionId": {
              "type": "string",
              "value": "[if(parameters('aiSearchExists'), variables('acsParts')[2], subscription().subscriptionId)]"
            },
            "azureStorageName": {
              "type": "string",
              "value": "[if(parameters('azureStorageExists'), variables('azureStorageParts')[8], parameters('azureStorageName'))]"
            },
            "azureStorageId": {
              "type": "string",
              "value": "[if(parameters('azureStorageExists'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('azureStorageParts')[2], variables('azureStorageParts')[4]), 'Microsoft.Storage/storageAccounts', variables('azureStorageParts')[8]), resourceId('Microsoft.Storage/storageAccounts', parameters('azureStorageName')))]"
            },
            "azureStorageResourceGroupName": {
              "type": "string",
              "value": "[if(parameters('azureStorageExists'), variables('azureStorageParts')[4], resourceGroup().name)]"
            },
            "azureStorageSubscriptionId": {
              "type": "string",
              "value": "[if(parameters('azureStorageExists'), variables('azureStorageParts')[2], subscription().subscriptionId)]"
            },
            "cosmosDBName": {
              "type": "string",
              "value": "[if(parameters('cosmosDBExists'), variables('cosmosParts')[8], parameters('cosmosDBName'))]"
            },
            "cosmosDBId": {
              "type": "string",
              "value": "[if(parameters('cosmosDBExists'), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('cosmosParts')[2], variables('cosmosParts')[4]), 'Microsoft.DocumentDB/databaseAccounts', variables('cosmosParts')[8]), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDBName')))]"
            },
            "cosmosDBResourceGroupName": {
              "type": "string",
              "value": "[if(parameters('cosmosDBExists'), variables('cosmosParts')[4], resourceGroup().name)]"
            },
            "cosmosDBSubscriptionId": {
              "type": "string",
              "value": "[if(parameters('cosmosDBExists'), variables('cosmosParts')[2], subscription().subscriptionId)]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('validate-existing-resources-{0}-deployment', variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('{0}-private-endpoint', variables('uniqueSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aiAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.accountName.value]"
          },
          "aiSearchName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiSearchName.value]"
          },
          "storageName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.azureStorageName.value]"
          },
          "cosmosDBName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.cosmosDBName.value]"
          },
          "vnetName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
          },
          "peSubnetName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix'))), '2022-09-01').outputs.peSubnetName.value]"
          },
          "suffix": {
            "value": "[variables('uniqueSuffix')]"
          },
          "vnetResourceGroupName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix'))), '2022-09-01').outputs.virtualNetworkResourceGroup.value]"
          },
          "vnetSubscriptionId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix'))), '2022-09-01').outputs.virtualNetworkSubscriptionId.value]"
          },
          "cosmosDBSubscriptionId": {
            "value": "[variables('cosmosDBSubscriptionId')]"
          },
          "cosmosDBResourceGroupName": {
            "value": "[variables('cosmosDBResourceGroupName')]"
          },
          "aiSearchSubscriptionId": {
            "value": "[variables('aiSearchServiceSubscriptionId')]"
          },
          "aiSearchResourceGroupName": {
            "value": "[variables('aiSearchServiceResourceGroupName')]"
          },
          "storageAccountResourceGroupName": {
            "value": "[variables('azureStorageResourceGroupName')]"
          },
          "storageAccountSubscriptionId": {
            "value": "[variables('azureStorageSubscriptionId')]"
          },
          "existingDnsZones": {
            "value": "[parameters('existingDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "15286956915370771059"
            }
          },
          "parameters": {
            "aiAccountName": {
              "type": "string",
              "metadata": {
                "description": "Name of the AI Foundry account"
              }
            },
            "aiSearchName": {
              "type": "string",
              "metadata": {
                "description": "Name of the AI Search service"
              }
            },
            "storageName": {
              "type": "string",
              "metadata": {
                "description": "Name of the storage account"
              }
            },
            "cosmosDBName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Cosmos DB account"
              }
            },
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Vnet"
              }
            },
            "peSubnetName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Customer subnet"
              }
            },
            "suffix": {
              "type": "string",
              "metadata": {
                "description": "Suffix for unique resource names"
              }
            },
            "vnetResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Resource Group name for existing Virtual Network (if different from current resource group)"
              }
            },
            "vnetSubscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "Subscription ID for Virtual Network"
              }
            },
            "storageAccountResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Resource Group name for Storage Account"
              }
            },
            "storageAccountSubscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "Subscription ID for Storage account"
              }
            },
            "aiSearchSubscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "Subscription ID for AI Search service"
              }
            },
            "aiSearchResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Resource Group name for AI Search service"
              }
            },
            "cosmosDBSubscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "Subscription ID for Cosmos DB account"
              }
            },
            "cosmosDBResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "Resource group name for Cosmos DB account"
              }
            },
            "existingDnsZones": {
              "type": "object",
              "defaultValue": {
                "privatelink.services.ai.azure.com": "",
                "privatelink.openai.azure.com": "",
                "privatelink.cognitiveservices.azure.com": "",
                "privatelink.search.windows.net": "",
                "[format('privatelink.blob.{0}', environment().suffixes.storage)]": "",
                "privatelink.documents.azure.com": ""
              },
              "metadata": {
                "description": "Map of DNS zone FQDNs to resource group names. If provided, reference existing DNS zones in this resource group instead of creating them."
              }
            }
          },
          "variables": {
            "aiServicesDnsZoneName": "privatelink.services.ai.azure.com",
            "openAiDnsZoneName": "privatelink.openai.azure.com",
            "cognitiveServicesDnsZoneName": "privatelink.cognitiveservices.azure.com",
            "aiSearchDnsZoneName": "privatelink.search.windows.net",
            "storageDnsZoneName": "[format('privatelink.blob.{0}', environment().suffixes.storage)]",
            "cosmosDBDnsZoneName": "privatelink.documents.azure.com",
            "aiServicesDnsZoneRG": "[parameters('existingDnsZones')[variables('aiServicesDnsZoneName')]]",
            "openAiDnsZoneRG": "[parameters('existingDnsZones')[variables('openAiDnsZoneName')]]",
            "cognitiveServicesDnsZoneRG": "[parameters('existingDnsZones')[variables('cognitiveServicesDnsZoneName')]]",
            "aiSearchDnsZoneRG": "[parameters('existingDnsZones')[variables('aiSearchDnsZoneName')]]",
            "storageDnsZoneRG": "[parameters('existingDnsZones')[variables('storageDnsZoneName')]]",
            "cosmosDBDnsZoneRG": "[parameters('existingDnsZones')[variables('cosmosDBDnsZoneName')]]",
            "aiServicesDnsZoneId": "[if(empty(variables('aiServicesDnsZoneRG')), resourceId('Microsoft.Network/privateDnsZones', variables('aiServicesDnsZoneName')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('aiServicesDnsZoneRG')), 'Microsoft.Network/privateDnsZones', variables('aiServicesDnsZoneName')))]",
            "openAiDnsZoneId": "[if(empty(variables('openAiDnsZoneRG')), resourceId('Microsoft.Network/privateDnsZones', variables('openAiDnsZoneName')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('openAiDnsZoneRG')), 'Microsoft.Network/privateDnsZones', variables('openAiDnsZoneName')))]",
            "cognitiveServicesDnsZoneId": "[if(empty(variables('cognitiveServicesDnsZoneRG')), resourceId('Microsoft.Network/privateDnsZones', variables('cognitiveServicesDnsZoneName')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('cognitiveServicesDnsZoneRG')), 'Microsoft.Network/privateDnsZones', variables('cognitiveServicesDnsZoneName')))]",
            "aiSearchDnsZoneId": "[if(empty(variables('aiSearchDnsZoneRG')), resourceId('Microsoft.Network/privateDnsZones', variables('aiSearchDnsZoneName')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('aiSearchDnsZoneRG')), 'Microsoft.Network/privateDnsZones', variables('aiSearchDnsZoneName')))]",
            "storageDnsZoneId": "[if(empty(variables('storageDnsZoneRG')), resourceId('Microsoft.Network/privateDnsZones', variables('storageDnsZoneName')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('storageDnsZoneRG')), 'Microsoft.Network/privateDnsZones', variables('storageDnsZoneName')))]",
            "cosmosDBDnsZoneId": "[if(empty(variables('cosmosDBDnsZoneRG')), resourceId('Microsoft.Network/privateDnsZones', variables('cosmosDBDnsZoneName')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('cosmosDBDnsZoneRG')), 'Microsoft.Network/privateDnsZones', variables('cosmosDBDnsZoneName')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}-private-endpoint', parameters('aiAccountName'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('vnetSubscriptionId'), parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('peSubnetName'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-private-link-service-connection', parameters('aiAccountName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.CognitiveServices/accounts', parameters('aiAccountName'))]",
                      "groupIds": [
                        "account"
                      ]
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}-private-endpoint', parameters('aiSearchName'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('vnetSubscriptionId'), parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('peSubnetName'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-private-link-service-connection', parameters('aiSearchName'))]",
                    "properties": {
                      "privateLinkServiceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('aiSearchSubscriptionId'), parameters('aiSearchResourceGroupName')), 'Microsoft.Search/searchServices', parameters('aiSearchName'))]",
                      "groupIds": [
                        "searchService"
                      ]
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}-private-endpoint', parameters('storageName'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('vnetSubscriptionId'), parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('peSubnetName'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-private-link-service-connection', parameters('storageName'))]",
                    "properties": {
                      "privateLinkServiceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('storageAccountSubscriptionId'), parameters('storageAccountResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('storageName'))]",
                      "groupIds": [
                        "blob"
                      ]
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}-private-endpoint', parameters('cosmosDBName'))]",
              "location": "[resourceGroup().location]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('vnetSubscriptionId'), parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('peSubnetName'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-private-link-service-connection', parameters('cosmosDBName'))]",
                    "properties": {
                      "privateLinkServiceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('cosmosDBSubscriptionId'), parameters('cosmosDBResourceGroupName')), 'Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDBName'))]",
                      "groupIds": [
                        "Sql"
                      ]
                    }
                  }
                ]
              }
            },
            {
              "condition": "[empty(variables('aiServicesDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('aiServicesDnsZoneName')]",
              "location": "global"
            },
            {
              "condition": "[empty(variables('openAiDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('openAiDnsZoneName')]",
              "location": "global"
            },
            {
              "condition": "[empty(variables('cognitiveServicesDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('cognitiveServicesDnsZoneName')]",
              "location": "global"
            },
            {
              "condition": "[empty(variables('aiSearchDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('aiSearchDnsZoneName')]",
              "location": "global"
            },
            {
              "condition": "[empty(variables('storageDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('storageDnsZoneName')]",
              "location": "global"
            },
            {
              "condition": "[empty(variables('cosmosDBDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('cosmosDBDnsZoneName')]",
              "location": "global"
            },
            {
              "condition": "[empty(variables('aiServicesDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2024-06-01",
              "name": "[format('{0}/{1}', variables('aiServicesDnsZoneName'), format('aiServices-{0}-link', parameters('suffix')))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('vnetSubscriptionId'), parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('aiServicesDnsZoneName'))]"
              ]
            },
            {
              "condition": "[empty(variables('openAiDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2024-06-01",
              "name": "[format('{0}/{1}', variables('openAiDnsZoneName'), format('aiServicesOpenAI-{0}-link', parameters('suffix')))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('vnetSubscriptionId'), parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('openAiDnsZoneName'))]"
              ]
            },
            {
              "condition": "[empty(variables('cognitiveServicesDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2024-06-01",
              "name": "[format('{0}/{1}', variables('cognitiveServicesDnsZoneName'), format('aiServicesCognitiveServices-{0}-link', parameters('suffix')))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('vnetSubscriptionId'), parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('cognitiveServicesDnsZoneName'))]"
              ]
            },
            {
              "condition": "[empty(variables('aiSearchDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2024-06-01",
              "name": "[format('{0}/{1}', variables('aiSearchDnsZoneName'), format('aiSearch-{0}-link', parameters('suffix')))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('vnetSubscriptionId'), parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('aiSearchDnsZoneName'))]"
              ]
            },
            {
              "condition": "[empty(variables('storageDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2024-06-01",
              "name": "[format('{0}/{1}', variables('storageDnsZoneName'), format('storage-{0}-link', parameters('suffix')))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('vnetSubscriptionId'), parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('storageDnsZoneName'))]"
              ]
            },
            {
              "condition": "[empty(variables('cosmosDBDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2024-06-01",
              "name": "[format('{0}/{1}', variables('cosmosDBDnsZoneName'), format('cosmosDB-{0}-link', parameters('suffix')))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('vnetSubscriptionId'), parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('cosmosDBDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}/{1}', format('{0}-private-endpoint', parameters('aiAccountName')), format('{0}-dns-group', parameters('aiAccountName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}-dns-aiserv-config', parameters('aiAccountName'))]",
                    "properties": {
                      "privateDnsZoneId": "[variables('aiServicesDnsZoneId')]"
                    }
                  },
                  {
                    "name": "[format('{0}-dns-openai-config', parameters('aiAccountName'))]",
                    "properties": {
                      "privateDnsZoneId": "[variables('openAiDnsZoneId')]"
                    }
                  },
                  {
                    "name": "[format('{0}-dns-cogserv-config', parameters('aiAccountName'))]",
                    "properties": {
                      "privateDnsZoneId": "[variables('cognitiveServicesDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-private-endpoint', parameters('aiAccountName')))]",
                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('aiServicesDnsZoneName'), format('aiServices-{0}-link', parameters('suffix')))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('aiServicesDnsZoneName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('cognitiveServicesDnsZoneName'), format('aiServicesCognitiveServices-{0}-link', parameters('suffix')))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('cognitiveServicesDnsZoneName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('openAiDnsZoneName'), format('aiServicesOpenAI-{0}-link', parameters('suffix')))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('openAiDnsZoneName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}/{1}', format('{0}-private-endpoint', parameters('aiSearchName')), format('{0}-dns-group', parameters('aiSearchName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}-dns-config', parameters('aiSearchName'))]",
                    "properties": {
                      "privateDnsZoneId": "[variables('aiSearchDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('aiSearchDnsZoneName'), format('aiSearch-{0}-link', parameters('suffix')))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('aiSearchDnsZoneName'))]",
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-private-endpoint', parameters('aiSearchName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}/{1}', format('{0}-private-endpoint', parameters('storageName')), format('{0}-dns-group', parameters('storageName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}-dns-config', parameters('storageName'))]",
                    "properties": {
                      "privateDnsZoneId": "[variables('storageDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('storageDnsZoneName'), format('storage-{0}-link', parameters('suffix')))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('storageDnsZoneName'))]",
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-private-endpoint', parameters('storageName')))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}/{1}', format('{0}-private-endpoint', parameters('cosmosDBName')), format('{0}-dns-group', parameters('cosmosDBName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}-dns-config', parameters('cosmosDBName'))]",
                    "properties": {
                      "privateDnsZoneId": "[variables('cosmosDBDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('cosmosDBDnsZoneName'), format('cosmosDB-{0}-link', parameters('suffix')))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('cosmosDBDnsZoneName'))]",
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-private-endpoint', parameters('cosmosDBName')))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "projectName": {
            "value": "[variables('projectName')]"
          },
          "projectDescription": {
            "value": "[parameters('projectDescription')]"
          },
          "displayName": {
            "value": "[parameters('displayName')]"
          },
          "location": {
            "value": "[parameters('location')]"
          },
          "aiSearchName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiSearchName.value]"
          },
          "aiSearchServiceResourceGroupName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiSearchServiceResourceGroupName.value]"
          },
          "aiSearchServiceSubscriptionId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiSearchServiceSubscriptionId.value]"
          },
          "cosmosDBName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.cosmosDBName.value]"
          },
          "cosmosDBSubscriptionId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.cosmosDBSubscriptionId.value]"
          },
          "cosmosDBResourceGroupName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.cosmosDBResourceGroupName.value]"
          },
          "azureStorageName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.azureStorageName.value]"
          },
          "azureStorageSubscriptionId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.azureStorageSubscriptionId.value]"
          },
          "azureStorageResourceGroupName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.azureStorageResourceGroupName.value]"
          },
          "accountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.accountName.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "7270965078496314448"
            }
          },
          "parameters": {
            "accountName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "projectName": {
              "type": "string"
            },
            "projectDescription": {
              "type": "string"
            },
            "displayName": {
              "type": "string"
            },
            "aiSearchName": {
              "type": "string"
            },
            "aiSearchServiceResourceGroupName": {
              "type": "string"
            },
            "aiSearchServiceSubscriptionId": {
              "type": "string"
            },
            "cosmosDBName": {
              "type": "string"
            },
            "cosmosDBSubscriptionId": {
              "type": "string"
            },
            "cosmosDBResourceGroupName": {
              "type": "string"
            },
            "azureStorageName": {
              "type": "string"
            },
            "azureStorageSubscriptionId": {
              "type": "string"
            },
            "azureStorageResourceGroupName": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts/projects/connections",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('accountName'), parameters('projectName'), parameters('cosmosDBName'))]",
              "properties": {
                "category": "CosmosDB",
                "target": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('cosmosDBSubscriptionId'), parameters('cosmosDBResourceGroupName')), 'Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDBName')), '2024-12-01-preview').documentEndpoint]",
                "authType": "AAD",
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('cosmosDBSubscriptionId'), parameters('cosmosDBResourceGroupName')), 'Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDBName'))]",
                  "location": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('cosmosDBSubscriptionId'), parameters('cosmosDBResourceGroupName')), 'Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDBName')), '2024-12-01-preview', 'full').location]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('accountName'), parameters('projectName'))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/projects/connections",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('accountName'), parameters('projectName'), parameters('azureStorageName'))]",
              "properties": {
                "category": "AzureStorageAccount",
                "target": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('azureStorageSubscriptionId'), parameters('azureStorageResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('azureStorageName')), '2023-05-01').primaryEndpoints.blob]",
                "authType": "AAD",
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('azureStorageSubscriptionId'), parameters('azureStorageResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('azureStorageName'))]",
                  "location": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('azureStorageSubscriptionId'), parameters('azureStorageResourceGroupName')), 'Microsoft.Storage/storageAccounts', parameters('azureStorageName')), '2023-05-01', 'full').location]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('accountName'), parameters('projectName'))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/projects/connections",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}/{2}', parameters('accountName'), parameters('projectName'), parameters('aiSearchName'))]",
              "properties": {
                "category": "CognitiveSearch",
                "target": "[format('https://{0}.search.windows.net', parameters('aiSearchName'))]",
                "authType": "AAD",
                "metadata": {
                  "ApiType": "Azure",
                  "ResourceId": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('aiSearchServiceSubscriptionId'), parameters('aiSearchServiceResourceGroupName')), 'Microsoft.Search/searchServices', parameters('aiSearchName'))]",
                  "location": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('aiSearchServiceSubscriptionId'), parameters('aiSearchServiceResourceGroupName')), 'Microsoft.Search/searchServices', parameters('aiSearchName')), '2024-06-01-preview', 'full').location]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('accountName'), parameters('projectName'))]"
              ]
            },
            {
              "type": "Microsoft.CognitiveServices/accounts/projects",
              "apiVersion": "2025-04-01-preview",
              "name": "[format('{0}/{1}', parameters('accountName'), parameters('projectName'))]",
              "location": "[parameters('location')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "description": "[parameters('projectDescription')]",
                "displayName": "[parameters('displayName')]"
              }
            }
          ],
          "outputs": {
            "projectName": {
              "type": "string",
              "value": "[parameters('projectName')]"
            },
            "projectId": {
              "type": "string",
              "value": "[resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('accountName'), parameters('projectName'))]"
            },
            "projectPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('accountName'), parameters('projectName')), '2025-04-01-preview', 'full').identity.principalId]"
            },
            "projectWorkspaceId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.CognitiveServices/accounts/projects', parameters('accountName'), parameters('projectName')), '2025-04-01-preview').internalId]"
            },
            "cosmosDBConnection": {
              "type": "string",
              "value": "[parameters('cosmosDBName')]"
            },
            "azureStorageConnection": {
              "type": "string",
              "value": "[parameters('azureStorageName')]"
            },
            "aiSearchConnection": {
              "type": "string",
              "value": "[parameters('aiSearchName')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-private-endpoint', variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('format-project-workspace-id-{0}-deployment', variables('uniqueSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "projectWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.projectWorkspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "1630418642552914053"
            }
          },
          "parameters": {
            "projectWorkspaceId": {
              "type": "string"
            }
          },
          "variables": {
            "part1": "[substring(parameters('projectWorkspaceId'), 0, 8)]",
            "part2": "[substring(parameters('projectWorkspaceId'), 8, 4)]",
            "part3": "[substring(parameters('projectWorkspaceId'), 12, 4)]",
            "part4": "[substring(parameters('projectWorkspaceId'), 16, 4)]",
            "part5": "[substring(parameters('projectWorkspaceId'), 20, 12)]",
            "formattedGuid": "[format('{0}-{1}-{2}-{3}-{4}', variables('part1'), variables('part2'), variables('part3'), variables('part4'), variables('part5'))]"
          },
          "resources": [],
          "outputs": {
            "projectWorkspaceIdGuid": {
              "type": "string",
              "value": "[variables('formattedGuid')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('storage-{0}-{1}-deployment', variables('azureStorageName'), variables('uniqueSuffix'))]",
      "subscriptionId": "[variables('azureStorageSubscriptionId')]",
      "resourceGroup": "[variables('azureStorageResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "azureStorageName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.azureStorageName.value]"
          },
          "projectPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.projectPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "17551715511504513729"
            }
          },
          "parameters": {
            "azureStorageName": {
              "type": "string"
            },
            "projectPrincipalId": {
              "type": "string"
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('azureStorageName'))]",
              "name": "[guid(parameters('projectPrincipalId'), resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe'), resourceId('Microsoft.Storage/storageAccounts', parameters('azureStorageName')))]",
              "properties": {
                "principalId": "[parameters('projectPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'ba92f5b4-2d11-453d-a403-e96b0029c9fe')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-private-endpoint', variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('cosmos-account-ra-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))]",
      "subscriptionId": "[variables('cosmosDBSubscriptionId')]",
      "resourceGroup": "[variables('cosmosDBResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosDBName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.cosmosDBName.value]"
          },
          "projectPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.projectPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "14520822405888680131"
            }
          },
          "parameters": {
            "cosmosDBName": {
              "type": "string",
              "metadata": {
                "description": "Name of the AI Search resource"
              }
            },
            "projectPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "Principal ID of the AI project"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.DocumentDB/databaseAccounts/{0}', parameters('cosmosDBName'))]",
              "name": "[guid(parameters('projectPrincipalId'), resourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa'), resourceId('Microsoft.DocumentDB/databaseAccounts', parameters('cosmosDBName')))]",
              "properties": {
                "principalId": "[parameters('projectPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '230815da-be43-4aae-9cb4-875f7bd000aa')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-private-endpoint', variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('ai-search-ra-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))]",
      "subscriptionId": "[variables('aiSearchServiceSubscriptionId')]",
      "resourceGroup": "[variables('aiSearchServiceResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aiSearchName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiSearchName.value]"
          },
          "projectPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.projectPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "14867846200503976585"
            }
          },
          "parameters": {
            "aiSearchName": {
              "type": "string",
              "metadata": {
                "description": "Name of the AI Search resource"
              }
            },
            "projectPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "Principal ID of the AI project"
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(parameters('projectPrincipalId'), resourceId('Microsoft.Authorization/roleDefinitions', '8ebe5a00-799e-43f5-93ac-243d3dce84a7'), resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')))]",
              "properties": {
                "principalId": "[parameters('projectPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '8ebe5a00-799e-43f5-93ac-243d3dce84a7')]",
                "principalType": "ServicePrincipal"
              }
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Search/searchServices/{0}', parameters('aiSearchName'))]",
              "name": "[guid(parameters('projectPrincipalId'), resourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0'), resourceId('Microsoft.Search/searchServices', parameters('aiSearchName')))]",
              "properties": {
                "principalId": "[parameters('projectPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', '7ca78c08-252a-4471-8644-bb5ff32d4ba0')]",
                "principalType": "ServicePrincipal"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-private-endpoint', variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('cosmos-db-setup-{0}-deployment', variables('uniqueSuffix'))]",
      "subscriptionId": "[variables('cosmosDBSubscriptionId')]",
      "resourceGroup": "[variables('cosmosDBResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.cosmosDBName.value]"
          },
          "databaseName": {
            "value": "enterprise_memory"
          },
          "throughput": {
            "value": 400
          },
          "projectId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.projectWorkspaceId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "5426410239691367961"
            }
          },
          "parameters": {
            "cosmosAccountName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Cosmos DB account"
              }
            },
            "databaseName": {
              "type": "string",
              "defaultValue": "enterprise_memory",
              "metadata": {
                "description": "Name of the database to create"
              }
            },
            "throughput": {
              "type": "int",
              "defaultValue": 400,
              "metadata": {
                "description": "Throughput for the database (RU/s)"
              }
            },
            "projectId": {
              "type": "string",
              "metadata": {
                "description": "Project ID for AI Agents capability host containers"
              }
            }
          },
          "variables": {
            "formattedProjectId": "[format('{0}-{1}-{2}-{3}-{4}', substring(parameters('projectId'), 0, 8), substring(parameters('projectId'), 8, 4), substring(parameters('projectId'), 12, 4), substring(parameters('projectId'), 16, 4), substring(parameters('projectId'), 20, 12))]"
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases",
              "apiVersion": "2024-05-15",
              "name": "[format('{0}/{1}', parameters('cosmosAccountName'), parameters('databaseName'))]",
              "properties": {
                "resource": {
                  "id": "[parameters('databaseName')]"
                },
                "options": {
                  "throughput": "[parameters('throughput')]"
                }
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2024-05-15",
              "name": "[format('{0}/{1}/{2}', parameters('cosmosAccountName'), parameters('databaseName'), format('{0}-system-thread-message-store', variables('formattedProjectId')))]",
              "properties": {
                "resource": {
                  "id": "[format('{0}-system-thread-message-store', variables('formattedProjectId'))]",
                  "partitionKey": {
                    "paths": [
                      "/id"
                    ],
                    "kind": "Hash"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosAccountName'), parameters('databaseName'))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2024-05-15",
              "name": "[format('{0}/{1}/{2}', parameters('cosmosAccountName'), parameters('databaseName'), format('{0}-agent-entity-store', variables('formattedProjectId')))]",
              "properties": {
                "resource": {
                  "id": "[format('{0}-agent-entity-store', variables('formattedProjectId'))]",
                  "partitionKey": {
                    "paths": [
                      "/id"
                    ],
                    "kind": "Hash"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosAccountName'), parameters('databaseName'))]"
              ]
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers",
              "apiVersion": "2024-05-15",
              "name": "[format('{0}/{1}/{2}', parameters('cosmosAccountName'), parameters('databaseName'), format('{0}-thread-message-store', variables('formattedProjectId')))]",
              "properties": {
                "resource": {
                  "id": "[format('{0}-thread-message-store', variables('formattedProjectId'))]",
                  "partitionKey": {
                    "paths": [
                      "/id"
                    ],
                    "kind": "Hash"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosAccountName'), parameters('databaseName'))]"
              ]
            }
          ],
          "outputs": {
            "databaseName": {
              "type": "string",
              "value": "[parameters('databaseName')]"
            },
            "databaseResourceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases', parameters('cosmosAccountName'), parameters('databaseName'))]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('cosmosDBSubscriptionId'), variables('cosmosDBResourceGroupName')), 'Microsoft.Resources/deployments', format('cosmos-account-ra-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('capabilityHost-configuration-{0}-deployment', variables('uniqueSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "accountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.accountName.value]"
          },
          "projectName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.projectName.value]"
          },
          "cosmosDBConnection": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.cosmosDBConnection.value]"
          },
          "azureStorageConnection": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.azureStorageConnection.value]"
          },
          "aiSearchConnection": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiSearchConnection.value]"
          },
          "projectCapHost": {
            "value": "[parameters('projectCapHost')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "8886544608062536910"
            }
          },
          "parameters": {
            "cosmosDBConnection": {
              "type": "string"
            },
            "azureStorageConnection": {
              "type": "string"
            },
            "aiSearchConnection": {
              "type": "string"
            },
            "projectName": {
              "type": "string"
            },
            "accountName": {
              "type": "string"
            },
            "projectCapHost": {
              "type": "string"
            }
          },
          "variables": {
            "threadConnections": [
              "[format('{0}', parameters('cosmosDBConnection'))]"
            ],
            "storageConnections": [
              "[format('{0}', parameters('azureStorageConnection'))]"
            ],
            "vectorStoreConnections": [
              "[format('{0}', parameters('aiSearchConnection'))]"
            ]
          },
          "resources": [
            {
              "type": "Microsoft.CognitiveServices/accounts/projects/capabilityHosts",
              "apiVersion": "2025-06-01",
              "name": "[format('{0}/{1}/{2}', parameters('accountName'), parameters('projectName'), parameters('projectCapHost'))]",
              "properties": {
                "capabilityHostKind": "Agents",
                "vectorStoreConnections": "[variables('vectorStoreConnections')]",
                "storageConnections": "[variables('storageConnections')]",
                "threadStorageConnections": "[variables('threadConnections')]"
              }
            }
          ],
          "outputs": {
            "projectCapHost": {
              "type": "string",
              "value": "[parameters('projectCapHost')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('aiSearchServiceSubscriptionId'), variables('aiSearchServiceResourceGroupName')), 'Microsoft.Resources/deployments', format('ai-search-ra-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('cosmosDBSubscriptionId'), variables('cosmosDBResourceGroupName')), 'Microsoft.Resources/deployments', format('cosmos-account-ra-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('cosmosDBSubscriptionId'), variables('cosmosDBResourceGroupName')), 'Microsoft.Resources/deployments', format('cosmos-db-setup-{0}-deployment', variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('{0}-private-endpoint', variables('uniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('azureStorageSubscriptionId'), variables('azureStorageResourceGroupName')), 'Microsoft.Resources/deployments', format('storage-{0}-{1}-deployment', variables('azureStorageName'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('storage-containers-{0}-deployment', variables('uniqueSuffix'))]",
      "subscriptionId": "[variables('azureStorageSubscriptionId')]",
      "resourceGroup": "[variables('azureStorageResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "aiProjectPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.projectPrincipalId.value]"
          },
          "storageName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.azureStorageName.value]"
          },
          "workspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('format-project-workspace-id-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.projectWorkspaceIdGuid.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "3006306737913837821"
            }
          },
          "parameters": {
            "storageName": {
              "type": "string",
              "metadata": {
                "description": "Name of the storage account"
              }
            },
            "aiProjectPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "Principal ID of the AI Project"
              }
            },
            "workspaceId": {
              "type": "string",
              "metadata": {
                "description": "Workspace Id of the AI Project"
              }
            }
          },
          "variables": {
            "conditionStr": "[format('((!(ActionMatches{{''Microsoft.Storage/storageAccounts/blobServices/containers/blobs/tags/read''}})  AND  !(ActionMatches{{''Microsoft.Storage/storageAccounts/blobServices/containers/blobs/filter/action''}}) AND  !(ActionMatches{{''Microsoft.Storage/storageAccounts/blobServices/containers/blobs/tags/write''}}) ) OR (@Resource[Microsoft.Storage/storageAccounts/blobServices/containers:name] StringStartsWithIgnoreCase ''{0}'' AND @Resource[Microsoft.Storage/storageAccounts/blobServices/containers:name] StringLikeIgnoreCase ''*-azureml-agent''))', parameters('workspaceId'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', parameters('storageName'))]",
              "name": "[guid(resourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b'), resourceId('Microsoft.Storage/storageAccounts', parameters('storageName')))]",
              "properties": {
                "principalId": "[parameters('aiProjectPrincipalId')]",
                "roleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', 'b7e6dc6d-f1e8-4753-8033-0f276bb0955b')]",
                "principalType": "ServicePrincipal",
                "conditionVersion": "2.0",
                "condition": "[variables('conditionStr')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('format-project-workspace-id-{0}-deployment', variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('cosmos-ra-{0}-deployment', variables('uniqueSuffix'))]",
      "subscriptionId": "[variables('cosmosDBSubscriptionId')]",
      "resourceGroup": "[variables('cosmosDBResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "cosmosAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.cosmosDBName.value]"
          },
          "projectWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('format-project-workspace-id-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.projectWorkspaceIdGuid.value]"
          },
          "projectPrincipalId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.projectPrincipalId.value]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "12823752392500271535"
            }
          },
          "parameters": {
            "cosmosAccountName": {
              "type": "string",
              "metadata": {
                "description": "Name of the AI Search resource"
              }
            },
            "projectPrincipalId": {
              "type": "string",
              "metadata": {
                "description": "Project name"
              }
            },
            "projectWorkspaceId": {
              "type": "string"
            }
          },
          "variables": {
            "userThreadName": "[format('{0}-thread-message-store', parameters('projectWorkspaceId'))]",
            "systemThreadName": "[format('{0}-system-thread-message-store', parameters('projectWorkspaceId'))]",
            "entityStoreName": "[format('{0}-agent-entity-store', parameters('projectWorkspaceId'))]",
            "roleDefinitionId": "[resourceId('Microsoft.DocumentDB/databaseAccounts/sqlRoleDefinitions', parameters('cosmosAccountName'), '00000000-0000-0000-0000-000000000002')]",
            "scopeSystemContainer": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.DocumentDB/databaseAccounts/{2}/dbs/enterprise_memory/colls/{3}', subscription().subscriptionId, resourceGroup().name, parameters('cosmosAccountName'), variables('systemThreadName'))]",
            "scopeUserContainer": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.DocumentDB/databaseAccounts/{2}/dbs/enterprise_memory/colls/{3}', subscription().subscriptionId, resourceGroup().name, parameters('cosmosAccountName'), variables('userThreadName'))]",
            "scopeEntityContainer": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.DocumentDB/databaseAccounts/{2}/dbs/enterprise_memory/colls/{3}', subscription().subscriptionId, resourceGroup().name, parameters('cosmosAccountName'), variables('entityStoreName'))]"
          },
          "resources": [
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}', parameters('cosmosAccountName'), guid(parameters('projectWorkspaceId'), resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('cosmosAccountName'), 'enterprise_memory', variables('userThreadName')), variables('roleDefinitionId'), parameters('projectPrincipalId')))]",
              "properties": {
                "principalId": "[parameters('projectPrincipalId')]",
                "roleDefinitionId": "[variables('roleDefinitionId')]",
                "scope": "[variables('scopeUserContainer')]"
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}', parameters('cosmosAccountName'), guid(parameters('projectWorkspaceId'), resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('cosmosAccountName'), 'enterprise_memory', variables('systemThreadName')), variables('roleDefinitionId'), parameters('projectPrincipalId')))]",
              "properties": {
                "principalId": "[parameters('projectPrincipalId')]",
                "roleDefinitionId": "[variables('roleDefinitionId')]",
                "scope": "[variables('scopeSystemContainer')]"
              }
            },
            {
              "type": "Microsoft.DocumentDB/databaseAccounts/sqlRoleAssignments",
              "apiVersion": "2022-05-15",
              "name": "[format('{0}/{1}', parameters('cosmosAccountName'), guid(parameters('projectWorkspaceId'), resourceId('Microsoft.DocumentDB/databaseAccounts/sqlDatabases/containers', parameters('cosmosAccountName'), 'enterprise_memory', variables('entityStoreName')), variables('roleDefinitionId'), parameters('projectPrincipalId')))]",
              "properties": {
                "principalId": "[parameters('projectPrincipalId')]",
                "roleDefinitionId": "[variables('roleDefinitionId')]",
                "scope": "[variables('scopeEntityContainer')]"
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('cosmosDBSubscriptionId'), variables('cosmosDBResourceGroupName')), 'Microsoft.Resources/deployments', format('cosmos-db-setup-{0}-deployment', variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('format-project-workspace-id-{0}-deployment', variables('uniqueSuffix')))]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('azureStorageSubscriptionId'), variables('azureStorageResourceGroupName')), 'Microsoft.Resources/deployments', format('storage-containers-{0}-deployment', variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('monitoring-{0}-deployment', variables('uniqueSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "applicationInsightsName": {
            "value": "[format('appinsights-{0}', variables('uniqueSuffix'))]"
          },
          "logAnalyticsWorkspaceName": {
            "value": "[format('loganalytics-{0}', variables('uniqueSuffix'))]"
          },
          "vnetName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
          },
          "privateEndpointSubnetName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix'))), '2022-09-01').outputs.peSubnetName.value]"
          },
          "suffix": {
            "value": "[variables('uniqueSuffix')]"
          },
          "vnetResourceGroupName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix'))), '2022-09-01').outputs.virtualNetworkResourceGroup.value]"
          },
          "vnetSubscriptionId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix'))), '2022-09-01').outputs.virtualNetworkSubscriptionId.value]"
          },
          "enablePrivateEndpoints": {
            "value": false
          },
          "existingDnsZones": {
            "value": "[parameters('existingDnsZones')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "8430936517233910442"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]",
              "metadata": {
                "description": "Azure region of the deployment"
              }
            },
            "applicationInsightsName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Application Insights instance"
              }
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "metadata": {
                "description": "Name of the Log Analytics workspace"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to be applied to all resources"
              }
            },
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "Name of the VNet"
              }
            },
            "vnetResourceGroupName": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]",
              "metadata": {
                "description": "VNet resource group name"
              }
            },
            "vnetSubscriptionId": {
              "type": "string",
              "defaultValue": "[subscription().subscriptionId]",
              "metadata": {
                "description": "VNet subscription ID"
              }
            },
            "privateEndpointSubnetName": {
              "type": "string",
              "metadata": {
                "description": "Subnet name for private endpoints"
              }
            },
            "suffix": {
              "type": "string",
              "metadata": {
                "description": "Suffix for unique resource names"
              }
            },
            "enablePrivateEndpoints": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Enable private endpoints for Application Insights (requires AllowPrivateEndpoints feature)"
              }
            },
            "existingDnsZones": {
              "type": "object",
              "defaultValue": {
                "privatelink.monitor.azure.com": "",
                "privatelink.oms.opinsights.azure.com": "",
                "privatelink.ods.opinsights.azure.com": "",
                "privatelink.agentsvc.azure-automation.net": ""
              },
              "metadata": {
                "description": "Map of DNS zone FQDNs to resource group names. If provided, reference existing DNS zones."
              }
            }
          },
          "variables": {
            "monitorDnsZoneName": "privatelink.monitor.azure.com",
            "omsDnsZoneName": "privatelink.oms.opinsights.azure.com",
            "odsDnsZoneName": "privatelink.ods.opinsights.azure.com",
            "agentServiceDnsZoneName": "privatelink.agentsvc.azure-automation.net",
            "monitorDnsZoneRG": "[parameters('existingDnsZones')[variables('monitorDnsZoneName')]]",
            "omsDnsZoneRG": "[parameters('existingDnsZones')[variables('omsDnsZoneName')]]",
            "odsDnsZoneRG": "[parameters('existingDnsZones')[variables('odsDnsZoneName')]]",
            "agentServiceDnsZoneRG": "[parameters('existingDnsZones')[variables('agentServiceDnsZoneName')]]",
            "monitorDnsZoneId": "[if(empty(variables('monitorDnsZoneRG')), resourceId('Microsoft.Network/privateDnsZones', variables('monitorDnsZoneName')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('monitorDnsZoneRG')), 'Microsoft.Network/privateDnsZones', variables('monitorDnsZoneName')))]",
            "omsDnsZoneId": "[if(empty(variables('omsDnsZoneRG')), resourceId('Microsoft.Network/privateDnsZones', variables('omsDnsZoneName')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('omsDnsZoneRG')), 'Microsoft.Network/privateDnsZones', variables('omsDnsZoneName')))]",
            "odsDnsZoneId": "[if(empty(variables('odsDnsZoneRG')), resourceId('Microsoft.Network/privateDnsZones', variables('odsDnsZoneName')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('odsDnsZoneRG')), 'Microsoft.Network/privateDnsZones', variables('odsDnsZoneName')))]",
            "agentServiceDnsZoneId": "[if(empty(variables('agentServiceDnsZoneRG')), resourceId('Microsoft.Network/privateDnsZones', variables('agentServiceDnsZoneName')), extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, variables('agentServiceDnsZoneRG')), 'Microsoft.Network/privateDnsZones', variables('agentServiceDnsZoneName')))]"
          },
          "resources": [
            {
              "type": "Microsoft.OperationalInsights/workspaces",
              "apiVersion": "2022-10-01",
              "name": "[parameters('logAnalyticsWorkspaceName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "name": "PerGB2018"
                },
                "retentionInDays": 30,
                "features": {
                  "searchVersion": 1
                },
                "publicNetworkAccessForIngestion": "Disabled",
                "publicNetworkAccessForQuery": "Disabled"
              }
            },
            {
              "type": "Microsoft.Insights/components",
              "apiVersion": "2020-02-02",
              "name": "[parameters('applicationInsightsName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "kind": "web",
              "properties": {
                "Application_Type": "web",
                "WorkspaceResourceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
                "publicNetworkAccessForIngestion": "Disabled",
                "publicNetworkAccessForQuery": "Disabled"
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
              ]
            },
            {
              "condition": "[empty(variables('monitorDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('monitorDnsZoneName')]",
              "location": "global"
            },
            {
              "condition": "[empty(variables('omsDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('omsDnsZoneName')]",
              "location": "global"
            },
            {
              "condition": "[empty(variables('odsDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('odsDnsZoneName')]",
              "location": "global"
            },
            {
              "condition": "[empty(variables('agentServiceDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "[variables('agentServiceDnsZoneName')]",
              "location": "global"
            },
            {
              "condition": "[empty(variables('monitorDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2024-06-01",
              "name": "[format('{0}/{1}', variables('monitorDnsZoneName'), format('monitor-{0}-link', parameters('suffix')))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('vnetSubscriptionId'), parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('monitorDnsZoneName'))]"
              ]
            },
            {
              "condition": "[empty(variables('omsDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2024-06-01",
              "name": "[format('{0}/{1}', variables('omsDnsZoneName'), format('oms-{0}-link', parameters('suffix')))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('vnetSubscriptionId'), parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('omsDnsZoneName'))]"
              ]
            },
            {
              "condition": "[empty(variables('odsDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2024-06-01",
              "name": "[format('{0}/{1}', variables('odsDnsZoneName'), format('ods-{0}-link', parameters('suffix')))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('vnetSubscriptionId'), parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('odsDnsZoneName'))]"
              ]
            },
            {
              "condition": "[empty(variables('agentServiceDnsZoneRG'))]",
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2024-06-01",
              "name": "[format('{0}/{1}', variables('agentServiceDnsZoneName'), format('agentsvc-{0}-link', parameters('suffix')))]",
              "location": "global",
              "properties": {
                "virtualNetwork": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('vnetSubscriptionId'), parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks', parameters('vnetName'))]"
                },
                "registrationEnabled": false
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('agentServiceDnsZoneName'))]"
              ]
            },
            {
              "condition": "[parameters('enablePrivateEndpoints')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}-private-endpoint', parameters('applicationInsightsName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('vnetSubscriptionId'), parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('privateEndpointSubnetName'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-private-link-service-connection', parameters('applicationInsightsName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]",
                      "groupIds": [
                        "azuremonitor"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]"
              ]
            },
            {
              "condition": "[parameters('enablePrivateEndpoints')]",
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}-private-endpoint', parameters('logAnalyticsWorkspaceName'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "subnet": {
                  "id": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', parameters('vnetSubscriptionId'), parameters('vnetResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('vnetName'), parameters('privateEndpointSubnetName'))]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-private-link-service-connection', parameters('logAnalyticsWorkspaceName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]",
                      "groupIds": [
                        "azuremonitor"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
              ]
            },
            {
              "condition": "[parameters('enablePrivateEndpoints')]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}/{1}', format('{0}-private-endpoint', parameters('applicationInsightsName')), format('{0}-dns-group', parameters('applicationInsightsName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}-monitor-config', parameters('applicationInsightsName'))]",
                    "properties": {
                      "privateDnsZoneId": "[variables('monitorDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-private-endpoint', parameters('applicationInsightsName')))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('monitorDnsZoneName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('monitorDnsZoneName'), format('monitor-{0}-link', parameters('suffix')))]"
              ]
            },
            {
              "condition": "[parameters('enablePrivateEndpoints')]",
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2024-05-01",
              "name": "[format('{0}/{1}', format('{0}-private-endpoint', parameters('logAnalyticsWorkspaceName')), format('{0}-dns-group', parameters('logAnalyticsWorkspaceName')))]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "[format('{0}-oms-config', parameters('logAnalyticsWorkspaceName'))]",
                    "properties": {
                      "privateDnsZoneId": "[variables('omsDnsZoneId')]"
                    }
                  },
                  {
                    "name": "[format('{0}-ods-config', parameters('logAnalyticsWorkspaceName'))]",
                    "properties": {
                      "privateDnsZoneId": "[variables('odsDnsZoneId')]"
                    }
                  },
                  {
                    "name": "[format('{0}-agentsvc-config', parameters('logAnalyticsWorkspaceName'))]",
                    "properties": {
                      "privateDnsZoneId": "[variables('agentServiceDnsZoneId')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', variables('agentServiceDnsZoneName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('agentServiceDnsZoneName'), format('agentsvc-{0}-link', parameters('suffix')))]",
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-private-endpoint', parameters('logAnalyticsWorkspaceName')))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('odsDnsZoneName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('odsDnsZoneName'), format('ods-{0}-link', parameters('suffix')))]",
                "[resourceId('Microsoft.Network/privateDnsZones', variables('omsDnsZoneName'))]",
                "[resourceId('Microsoft.Network/privateDnsZones/virtualNetworkLinks', variables('omsDnsZoneName'), format('oms-{0}-link', parameters('suffix')))]"
              ]
            }
          ],
          "outputs": {
            "applicationInsightsId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Insights/components', parameters('applicationInsightsName'))]"
            },
            "applicationInsightsName": {
              "type": "string",
              "value": "[parameters('applicationInsightsName')]"
            },
            "applicationInsightsConnectionString": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').ConnectionString]"
            },
            "applicationInsightsInstrumentationKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Insights/components', parameters('applicationInsightsName')), '2020-02-02').InstrumentationKey]"
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "value": "[resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName'))]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[parameters('logAnalyticsWorkspaceName')]"
            },
            "logAnalyticsWorkspaceCustomerId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.OperationalInsights/workspaces', parameters('logAnalyticsWorkspaceName')), '2022-10-01').customerId]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-private-endpoint', variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "condition": "[parameters('enableBingSearch')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('bing-search-{0}-deployment', variables('uniqueSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "bingSearchName": {
            "value": "[variables('bingSearchName')]"
          },
          "vnetName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
          },
          "subnetName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix'))), '2022-09-01').outputs.peSubnetName.value]"
          },
          "dnsZoneResourceGroupName": {
            "value": "[resourceGroup().name]"
          },
          "createDnsZones": {
            "value": true
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "8745628555646573470"
            }
          },
          "parameters": {
            "bingSearchName": {
              "type": "string",
              "metadata": {
                "description": "Creates a Bing Search resource for web search capabilities"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "vnetName": {
              "type": "string",
              "defaultValue": ""
            },
            "subnetName": {
              "type": "string",
              "defaultValue": ""
            },
            "dnsZoneResourceGroupName": {
              "type": "string",
              "defaultValue": ""
            },
            "createDnsZones": {
              "type": "bool",
              "defaultValue": true
            }
          },
          "resources": [
            {
              "type": "Microsoft.Bing/accounts",
              "apiVersion": "2020-06-10",
              "name": "[parameters('bingSearchName')]",
              "location": "global",
              "tags": "[parameters('tags')]",
              "kind": "Bing.Grounding",
              "sku": {
                "name": "G1"
              }
            }
          ],
          "outputs": {
            "bingSearchId": {
              "type": "string",
              "value": "[resourceId('Microsoft.Bing/accounts', parameters('bingSearchName'))]"
            },
            "bingSearchName": {
              "type": "string",
              "value": "[parameters('bingSearchName')]"
            },
            "bingSearchEndpoint": {
              "type": "string",
              "value": "https://api.bing.microsoft.com/"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('{0}-private-endpoint', variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix')))]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "[format('container-app-{0}-deployment', variables('uniqueSuffix'))]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "containerAppEnvironmentName": {
            "value": "[variables('containerAppEnvironmentName')]"
          },
          "containerAppName": {
            "value": "[variables('containerAppName')]"
          },
          "containerRegistryName": {
            "value": "[variables('containerRegistryName')]"
          },
          "acaSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix'))), '2022-09-01').outputs.acaSubnetId.value]"
          },
          "peSubnetId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix'))), '2022-09-01').outputs.peSubnetId.value]"
          },
          "vnetName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix'))), '2022-09-01').outputs.virtualNetworkName.value]"
          },
          "vnetResourceGroupName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix'))), '2022-09-01').outputs.virtualNetworkResourceGroup.value]"
          },
          "vnetSubscriptionId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix'))), '2022-09-01').outputs.virtualNetworkSubscriptionId.value]"
          },
          "logAnalyticsWorkspaceId": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('monitoring-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceId.value]"
          },
          "aiProjectEndpoint": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.projectWorkspaceId.value]"
          },
          "applicationInsightsConnectionString": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('monitoring-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.applicationInsightsConnectionString.value]"
          },
          "applicationInsightsInstrumentationKey": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', format('monitoring-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.applicationInsightsInstrumentationKey.value]"
          },
          "enableBingSearch": {
            "value": "[parameters('enableBingSearch')]"
          },
          "bingSearchEndpoint": "[if(parameters('enableBingSearch'), createObject('value', 'https://api.bing.microsoft.com/'), createObject('value', ''))]",
          "bingSearchApiKey": {
            "value": ""
          },
          "containerAppIngressType": {
            "value": "[parameters('containerAppIngressType')]"
          },
          "tags": {
            "value": "[variables('azdTags')]"
          },
          "createContainerApp": {
            "value": "[parameters('createContainerApp')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.36.177.2456",
              "templateHash": "4848367215316417943"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "metadata": {
                "description": "Location for all resources"
              }
            },
            "containerAppEnvironmentName": {
              "type": "string",
              "metadata": {
                "description": "Container App Environment name"
              }
            },
            "containerAppName": {
              "type": "string",
              "metadata": {
                "description": "Container App name"
              }
            },
            "containerRegistryName": {
              "type": "string",
              "metadata": {
                "description": "Container Registry name"
              }
            },
            "aiProjectEndpoint": {
              "type": "string",
              "metadata": {
                "description": "AI Project endpoint URL"
              }
            },
            "acaSubnetId": {
              "type": "string",
              "metadata": {
                "description": "ACA (Container Apps Environment infrastructure) subnet ID (distinct from agent and pe subnets)"
              }
            },
            "peSubnetId": {
              "type": "string",
              "metadata": {
                "description": "Private Endpoint subnet ID"
              }
            },
            "vnetName": {
              "type": "string",
              "metadata": {
                "description": "VNet name for private endpoint integration"
              }
            },
            "vnetResourceGroupName": {
              "type": "string",
              "metadata": {
                "description": "VNet resource group name"
              }
            },
            "vnetSubscriptionId": {
              "type": "string",
              "metadata": {
                "description": "VNet subscription ID"
              }
            },
            "logAnalyticsWorkspaceId": {
              "type": "string",
              "metadata": {
                "description": "Log Analytics Workspace resource ID from Application Insights module"
              }
            },
            "applicationInsightsConnectionString": {
              "type": "string",
              "metadata": {
                "description": "Application Insights connection string"
              }
            },
            "applicationInsightsInstrumentationKey": {
              "type": "string",
              "metadata": {
                "description": "Application Insights instrumentation key"
              }
            },
            "enableBingSearch": {
              "type": "bool",
              "defaultValue": false,
              "metadata": {
                "description": "Enable Bing Search for web search capabilities"
              }
            },
            "bingSearchEndpoint": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Bing Search endpoint URL (optional)"
              }
            },
            "bingSearchApiKey": {
              "type": "securestring",
              "defaultValue": "",
              "metadata": {
                "description": "Bing Search API key (optional)"
              }
            },
            "containerAppIngressType": {
              "type": "string",
              "defaultValue": "internal",
              "allowedValues": [
                "external",
                "internal"
              ],
              "metadata": {
                "description": "Container App ingress type: external (internet-accessible) or internal (VNet-only)"
              }
            },
            "agentName": {
              "type": "string",
              "defaultValue": "citadel-research-agent",
              "metadata": {
                "description": "Name of the AI agent application"
              }
            },
            "containerName": {
              "type": "string",
              "defaultValue": "citadel-api",
              "metadata": {
                "description": "Name of the container"
              }
            },
            "containerImageTag": {
              "type": "string",
              "defaultValue": "latest",
              "metadata": {
                "description": "Image tag to deploy (ignored if containerImageDigest provided)"
              }
            },
            "containerImageDigest": {
              "type": "string",
              "defaultValue": "",
              "metadata": {
                "description": "Image digest value without the sha256: prefix (set via azd env if needed)"
              }
            },
            "tags": {
              "type": "object",
              "defaultValue": {},
              "metadata": {
                "description": "Tags to be applied to all resources"
              }
            },
            "createContainerApp": {
              "type": "bool",
              "defaultValue": true,
              "metadata": {
                "description": "Whether to create the Container App resource now (set false for two-phase deployment: infra first, image build, then app)."
              }
            }
          },
          "resources": [
            {
              "type": "Microsoft.ContainerRegistry/registries",
              "apiVersion": "2023-07-01",
              "name": "[parameters('containerRegistryName')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Premium"
              },
              "properties": {
                "adminUserEnabled": false,
                "publicNetworkAccess": "Enabled",
                "networkRuleSet": {
                  "defaultAction": "Allow"
                }
              }
            },
            {
              "type": "Microsoft.Network/privateEndpoints",
              "apiVersion": "2023-11-01",
              "name": "[format('{0}-private-endpoint', parameters('containerRegistryName'))]",
              "location": "[parameters('location')]",
              "properties": {
                "subnet": {
                  "id": "[parameters('peSubnetId')]"
                },
                "privateLinkServiceConnections": [
                  {
                    "name": "[format('{0}-private-connection', parameters('containerRegistryName'))]",
                    "properties": {
                      "privateLinkServiceId": "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]",
                      "groupIds": [
                        "registry"
                      ]
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
              ]
            },
            {
              "type": "Microsoft.Network/privateDnsZones",
              "apiVersion": "2020-06-01",
              "name": "privatelink.azurecr.io",
              "location": "global"
            },
            {
              "type": "Microsoft.Network/privateDnsZones/virtualNetworkLinks",
              "apiVersion": "2020-06-01",
              "name": "[format('{0}/{1}', 'privatelink.azurecr.io', format('{0}-link', parameters('vnetName')))]",
              "location": "global",
              "properties": {
                "registrationEnabled": false,
                "virtualNetwork": {
                  "id": "[format('/subscriptions/{0}/resourceGroups/{1}/providers/Microsoft.Network/virtualNetworks/{2}', parameters('vnetSubscriptionId'), parameters('vnetResourceGroupName'), parameters('vnetName'))]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azurecr.io')]"
              ]
            },
            {
              "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
              "apiVersion": "2023-11-01",
              "name": "[format('{0}/{1}', format('{0}-private-endpoint', parameters('containerRegistryName')), 'default')]",
              "properties": {
                "privateDnsZoneConfigs": [
                  {
                    "name": "privatelink-azurecr-io",
                    "properties": {
                      "privateDnsZoneId": "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azurecr.io')]"
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/privateDnsZones', 'privatelink.azurecr.io')]",
                "[resourceId('Microsoft.Network/privateEndpoints', format('{0}-private-endpoint', parameters('containerRegistryName')))]"
              ]
            },
            {
              "type": "Microsoft.App/managedEnvironments",
              "apiVersion": "2024-03-01",
              "name": "[parameters('containerAppEnvironmentName')]",
              "location": "[parameters('location')]",
              "properties": {
                "appLogsConfiguration": {
                  "destination": "log-analytics",
                  "logAnalyticsConfiguration": {
                    "customerId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceId'), '/')[2], split(parameters('logAnalyticsWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('logAnalyticsWorkspaceId'), '/'))), '2023-09-01').customerId]",
                    "sharedKey": "[listKeys(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', split(parameters('logAnalyticsWorkspaceId'), '/')[2], split(parameters('logAnalyticsWorkspaceId'), '/')[4]), 'Microsoft.OperationalInsights/workspaces', last(split(parameters('logAnalyticsWorkspaceId'), '/'))), '2023-09-01').primarySharedKey]"
                  }
                },
                "vnetConfiguration": {
                  "infrastructureSubnetId": "[parameters('acaSubnetId')]"
                },
                "zoneRedundant": false
              }
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[format('{0}-uai', parameters('containerAppName'))]",
              "location": "[parameters('location')]"
            },
            {
              "condition": "[parameters('createContainerApp')]",
              "type": "Microsoft.App/containerApps",
              "apiVersion": "2024-03-01",
              "name": "[parameters('containerAppName')]",
              "location": "[parameters('location')]",
              "tags": "[union(parameters('tags'), createObject('azd-service-name', 'api'))]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uai', parameters('containerAppName'))))]": {}
                }
              },
              "properties": {
                "managedEnvironmentId": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppEnvironmentName'))]",
                "configuration": {
                  "activeRevisionsMode": "Single",
                  "ingress": {
                    "external": "[equals(parameters('containerAppIngressType'), 'external')]",
                    "targetPort": 50505,
                    "allowInsecure": false,
                    "traffic": [
                      {
                        "weight": 100,
                        "latestRevision": true
                      }
                    ]
                  },
                  "registries": [
                    {
                      "server": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-07-01').loginServer]",
                      "identity": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uai', parameters('containerAppName')))]"
                    }
                  ]
                },
                "template": {
                  "containers": [
                    {
                      "name": "[parameters('containerName')]",
                      "image": "[if(empty(parameters('containerImageDigest')), format('{0}/{1}:{2}', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-07-01').loginServer, parameters('containerName'), parameters('containerImageTag')), format('{0}/{1}@sha256:{2}', reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-07-01').loginServer, parameters('containerName'), parameters('containerImageDigest')))]",
                      "resources": {
                        "cpu": "[json('0.5')]",
                        "memory": "1Gi"
                      },
                      "env": "[union(createArray(createObject('name', 'AZURE_EXISTING_AIPROJECT_ENDPOINT', 'value', parameters('aiProjectEndpoint')), createObject('name', 'AZURE_AI_AGENT_NAME', 'value', parameters('agentName')), createObject('name', 'PORT', 'value', '50505'), createObject('name', 'AZURE_CLIENT_ID', 'value', ''), createObject('name', 'APPLICATIONINSIGHTS_CONNECTION_STRING', 'value', parameters('applicationInsightsConnectionString')), createObject('name', 'APPINSIGHTS_INSTRUMENTATIONKEY', 'value', parameters('applicationInsightsInstrumentationKey')), createObject('name', 'ENABLE_AZURE_MONITOR_TRACING', 'value', 'true'), createObject('name', 'AZURE_TRACING_GEN_AI_CONTENT_RECORDING_ENABLED', 'value', 'true')), if(parameters('enableBingSearch'), createArray(createObject('name', 'ENABLE_BING_SEARCH', 'value', 'true'), createObject('name', 'BING_SEARCH_ENDPOINT', 'value', parameters('bingSearchEndpoint')), createObject('name', 'BING_SEARCH_API_KEY', 'value', parameters('bingSearchApiKey'))), createArray()))]"
                    }
                  ],
                  "scale": {
                    "minReplicas": 1,
                    "maxReplicas": 3,
                    "rules": [
                      {
                        "name": "http-scale",
                        "http": {
                          "metadata": {
                            "concurrentRequests": "10"
                          }
                        }
                      }
                    ]
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppEnvironmentName'))]",
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uai', parameters('containerAppName')))]",
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
              ]
            },
            {
              "condition": "[parameters('createContainerApp')]",
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "scope": "[format('Microsoft.ContainerRegistry/registries/{0}', parameters('containerRegistryName'))]",
              "name": "[guid(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uai', parameters('containerAppName'))), 'AcrPull')]",
              "properties": {
                "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', '7f951dda-4ed3-4680-a7ca-43fe172d538d')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uai', parameters('containerAppName'))), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uai', parameters('containerAppName')))]",
                "[resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName'))]"
              ]
            }
          ],
          "outputs": {
            "containerAppName": {
              "type": "string",
              "value": "[if(parameters('createContainerApp'), parameters('containerAppName'), parameters('containerAppName'))]"
            },
            "containerRegistryName": {
              "type": "string",
              "value": "[parameters('containerRegistryName')]"
            },
            "containerRegistryLoginServer": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ContainerRegistry/registries', parameters('containerRegistryName')), '2023-07-01').loginServer]"
            },
            "logAnalyticsWorkspaceName": {
              "type": "string",
              "value": "[last(split(parameters('logAnalyticsWorkspaceId'), '/'))]"
            },
            "containerAppEnvironmentId": {
              "type": "string",
              "value": "[resourceId('Microsoft.App/managedEnvironments', parameters('containerAppEnvironmentName'))]"
            },
            "containerAppIdentityPrincipalId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uai', parameters('containerAppName'))), '2023-01-31').principalId]"
            },
            "containerAppIdentityClientId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uai', parameters('containerAppName'))), '2023-01-31').clientId]"
            },
            "containerAppIdentityId": {
              "type": "string",
              "value": "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('{0}-uai', parameters('containerAppName')))]"
            },
            "containerAppUri": {
              "type": "string",
              "value": "[if(parameters('createContainerApp'), format('https://{0}.gray.{1}.azurecontainerapps.io', parameters('containerAppName'), parameters('location')), '')]"
            }
          }
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('monitoring-{0}-deployment', variables('uniqueSuffix')))]",
        "[resourceId('Microsoft.Resources/deployments', format('vnet-{0}-{1}-deployment', variables('trimVnetName'), variables('uniqueSuffix')))]"
      ]
    }
  ],
  "outputs": {
    "debugTags": {
      "type": "object",
      "value": "[variables('azdTags')]"
    },
    "debugInputTags": {
      "type": "object",
      "value": "[parameters('tags')]"
    },
    "debugEnvironmentName": {
      "type": "string",
      "value": "[parameters('environmentName')]"
    },
    "AZURE_LOCATION": {
      "type": "string",
      "value": "[parameters('location')]"
    },
    "AZURE_CONTAINER_REGISTRY_ENDPOINT": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('container-app-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.containerRegistryLoginServer.value]"
    },
    "AZURE_CONTAINER_REGISTRY_NAME": {
      "type": "string",
      "value": "[variables('containerRegistryName')]"
    },
    "AZURE_CONTAINER_APPS_ENVIRONMENT_ID": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('container-app-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.containerAppEnvironmentId.value]"
    },
    "AZURE_CONTAINER_APPS_ENVIRONMENT_NAME": {
      "type": "string",
      "value": "[variables('containerAppEnvironmentName')]"
    },
    "SERVICE_API_IDENTITY_PRINCIPAL_ID": {
      "type": "string",
      "value": "[if(parameters('createContainerApp'), reference(resourceId('Microsoft.Resources/deployments', format('container-app-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.containerAppIdentityPrincipalId.value, '')]"
    },
    "SERVICE_API_IDENTITY_CLIENT_ID": {
      "type": "string",
      "value": "[if(parameters('createContainerApp'), reference(resourceId('Microsoft.Resources/deployments', format('container-app-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.containerAppIdentityClientId.value, '')]"
    },
    "SERVICE_API_IDENTITY_ID": {
      "type": "string",
      "value": "[if(parameters('createContainerApp'), reference(resourceId('Microsoft.Resources/deployments', format('container-app-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.containerAppIdentityId.value, '')]"
    },
    "SERVICE_API_NAME": {
      "type": "string",
      "value": "[if(parameters('createContainerApp'), reference(resourceId('Microsoft.Resources/deployments', format('container-app-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.containerAppName.value, '')]"
    },
    "SERVICE_API_URI": {
      "type": "string",
      "value": "[if(parameters('createContainerApp'), reference(resourceId('Microsoft.Resources/deployments', format('container-app-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.containerAppUri.value, '')]"
    },
    "SERVICE_API_ENDPOINTS": {
      "type": "array",
      "value": "[if(parameters('createContainerApp'), createArray(reference(resourceId('Microsoft.Resources/deployments', format('container-app-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.containerAppUri.value), createArray())]"
    },
    "RESOURCE_GROUP_ID": {
      "type": "string",
      "value": "[resourceGroup().id]"
    },
    "AZURE_OPENAI_API_VERSION": {
      "type": "string",
      "value": "[parameters('modelVersion')]"
    },
    "AZURE_OPENAI_ENDPOINT": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.accountTarget.value]"
    },
    "AZURE_OPENAI_CHAT_DEPLOYMENT_NAME": {
      "type": "string",
      "value": "[parameters('modelName')]"
    },
    "AZURE_BING_SEARCH_ENDPOINT": {
      "type": "string",
      "value": "[if(parameters('enableBingSearch'), 'https://api.bing.microsoft.com/', '')]"
    },
    "AZURE_BING_SEARCH_API_KEY": {
      "type": "string",
      "value": ""
    },
    "AZURE_AI_PROJECT_NAME": {
      "type": "string",
      "value": "[variables('projectName')]"
    },
    "AZURE_AI_PROJECT_ENDPOINT": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('ai-{0}-{1}-deployment', variables('projectName'), variables('uniqueSuffix'))), '2022-09-01').outputs.projectWorkspaceId.value]"
    },
    "AZURE_AI_PROJECT_CONNECTION_STRING": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('format-project-workspace-id-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.projectWorkspaceIdGuid.value]"
    },
    "AZURE_SEARCH_ENDPOINT": {
      "type": "string",
      "value": "[format('https://{0}.search.windows.net', reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.aiSearchName.value)]"
    },
    "AZURE_SEARCH_KEY": {
      "type": "string",
      "value": ""
    },
    "AZURE_COSMOS_ENDPOINT": {
      "type": "string",
      "value": "[format('https://{0}.documents.azure.com:443/', reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.cosmosDBName.value)]"
    },
    "AZURE_COSMOS_DATABASE_NAME": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', variables('cosmosDBSubscriptionId'), variables('cosmosDBResourceGroupName')), 'Microsoft.Resources/deployments', format('cosmos-db-setup-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.databaseName.value]"
    },
    "AZURE_COSMOS_CONTAINER_NAME": {
      "type": "string",
      "value": "memory"
    },
    "AZURE_STORAGE_ACCOUNT_NAME": {
      "type": "string",
      "value": "[variables('storageAccountName')]"
    },
    "AZURE_STORAGE_ACCOUNT_ENDPOINT": {
      "type": "string",
      "value": "[format('https://{0}.blob.{1}', reference(resourceId('Microsoft.Resources/deployments', format('dependencies-{0}-{1}-deployment', variables('aiAccountName'), variables('uniqueSuffix'))), '2022-09-01').outputs.azureStorageName.value, environment().suffixes.storage)]"
    },
    "AZURE_STORAGE_CONTAINER_NAME": {
      "type": "string",
      "value": "content"
    },
    "APPLICATION_INSIGHTS_CONNECTION_STRING": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('monitoring-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.applicationInsightsConnectionString.value]"
    },
    "APPLICATION_INSIGHTS_INSTRUMENTATION_KEY": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('monitoring-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.applicationInsightsInstrumentationKey.value]"
    },
    "LOG_ANALYTICS_WORKSPACE_ID": {
      "type": "string",
      "value": "[reference(resourceId('Microsoft.Resources/deployments', format('monitoring-{0}-deployment', variables('uniqueSuffix'))), '2022-09-01').outputs.logAnalyticsWorkspaceId.value]"
    },
    "ENABLE_AZURE_MONITOR_TRACING": {
      "type": "bool",
      "value": true
    },
    "AZURE_TRACING_GEN_AI_CONTENT_RECORDING_ENABLED": {
      "type": "bool",
      "value": true
    },
    "BING_SEARCH_ENABLED": {
      "type": "bool",
      "value": "[parameters('enableBingSearch')]"
    },
    "BING_SEARCH_RESOURCE_NAME": {
      "type": "string",
      "value": "[if(parameters('enableBingSearch'), variables('bingSearchName'), '')]"
    },
    "BING_SEARCH_ENDPOINT": {
      "type": "string",
      "value": "[if(parameters('enableBingSearch'), 'https://api.bing.microsoft.com/', '')]"
    }
  }
}